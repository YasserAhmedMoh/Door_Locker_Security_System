
mcu_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003754  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  00003754  000037e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000f8  008000f8  00003880  2**0
                  ALLOC
  3 .stab         00002e38  00000000  00000000  00003880  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001148  00000000  00000000  000066b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000096f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b394  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b781  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 30       	cpi	r26, 0x07	; 7
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ee       	ldi	r26, 0xE7	; 231
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2c 1b 	jmp	0x3658	; 0x3658 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 ee       	ldi	r24, 0xE7	; 231
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 timer0_tick=0;
void timer0_isr_fn(void);


int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c8 5b       	subi	r28, 0xB8	; 184
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 PW[4];
	uint8 confirm_pw[4];
	uint8 command;
	volatile uint8 check_pw;
	Timer0_setCallBack(timer0_isr_fn);
     b60:	87 e0       	ldi	r24, 0x07	; 7
     b62:	90 e1       	ldi	r25, 0x10	; 16
     b64:	0e 94 05 1a 	call	0x340a	; 0x340a <Timer0_setCallBack>

	LCD_init();
     b68:	0e 94 75 14 	call	0x28ea	; 0x28ea <LCD_init>
	LCD_clearScreen();
     b6c:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>

	UART_Config UConfig = {ASYNCH,ENABLED_EVEN,BIT_1};// Asynchronous with even parity and only one stop bit
     b70:	ce 01       	movw	r24, r28
     b72:	8a 55       	subi	r24, 0x5A	; 90
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	c1 55       	subi	r28, 0x51	; 81
     b78:	df 4f       	sbci	r29, 0xFF	; 255
     b7a:	99 83       	std	Y+1, r25	; 0x01
     b7c:	88 83       	st	Y, r24
     b7e:	cf 5a       	subi	r28, 0xAF	; 175
     b80:	d0 40       	sbci	r29, 0x00	; 0
     b82:	85 ef       	ldi	r24, 0xF5	; 245
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	cf 54       	subi	r28, 0x4F	; 79
     b88:	df 4f       	sbci	r29, 0xFF	; 255
     b8a:	99 83       	std	Y+1, r25	; 0x01
     b8c:	88 83       	st	Y, r24
     b8e:	c1 5b       	subi	r28, 0xB1	; 177
     b90:	d0 40       	sbci	r29, 0x00	; 0
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	cd 54       	subi	r28, 0x4D	; 77
     b96:	df 4f       	sbci	r29, 0xFF	; 255
     b98:	98 83       	st	Y, r25
     b9a:	c3 5b       	subi	r28, 0xB3	; 179
     b9c:	d0 40       	sbci	r29, 0x00	; 0
     b9e:	cf 54       	subi	r28, 0x4F	; 79
     ba0:	df 4f       	sbci	r29, 0xFF	; 255
     ba2:	e8 81       	ld	r30, Y
     ba4:	f9 81       	ldd	r31, Y+1	; 0x01
     ba6:	c1 5b       	subi	r28, 0xB1	; 177
     ba8:	d0 40       	sbci	r29, 0x00	; 0
     baa:	00 80       	ld	r0, Z
     bac:	cf 54       	subi	r28, 0x4F	; 79
     bae:	df 4f       	sbci	r29, 0xFF	; 255
     bb0:	88 81       	ld	r24, Y
     bb2:	99 81       	ldd	r25, Y+1	; 0x01
     bb4:	c1 5b       	subi	r28, 0xB1	; 177
     bb6:	d0 40       	sbci	r29, 0x00	; 0
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	cf 54       	subi	r28, 0x4F	; 79
     bbc:	df 4f       	sbci	r29, 0xFF	; 255
     bbe:	99 83       	std	Y+1, r25	; 0x01
     bc0:	88 83       	st	Y, r24
     bc2:	c1 5b       	subi	r28, 0xB1	; 177
     bc4:	d0 40       	sbci	r29, 0x00	; 0
     bc6:	c1 55       	subi	r28, 0x51	; 81
     bc8:	df 4f       	sbci	r29, 0xFF	; 255
     bca:	e8 81       	ld	r30, Y
     bcc:	f9 81       	ldd	r31, Y+1	; 0x01
     bce:	cf 5a       	subi	r28, 0xAF	; 175
     bd0:	d0 40       	sbci	r29, 0x00	; 0
     bd2:	00 82       	st	Z, r0
     bd4:	c1 55       	subi	r28, 0x51	; 81
     bd6:	df 4f       	sbci	r29, 0xFF	; 255
     bd8:	88 81       	ld	r24, Y
     bda:	99 81       	ldd	r25, Y+1	; 0x01
     bdc:	cf 5a       	subi	r28, 0xAF	; 175
     bde:	d0 40       	sbci	r29, 0x00	; 0
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	c1 55       	subi	r28, 0x51	; 81
     be4:	df 4f       	sbci	r29, 0xFF	; 255
     be6:	99 83       	std	Y+1, r25	; 0x01
     be8:	88 83       	st	Y, r24
     bea:	cf 5a       	subi	r28, 0xAF	; 175
     bec:	d0 40       	sbci	r29, 0x00	; 0
     bee:	cd 54       	subi	r28, 0x4D	; 77
     bf0:	df 4f       	sbci	r29, 0xFF	; 255
     bf2:	98 81       	ld	r25, Y
     bf4:	c3 5b       	subi	r28, 0xB3	; 179
     bf6:	d0 40       	sbci	r29, 0x00	; 0
     bf8:	91 50       	subi	r25, 0x01	; 1
     bfa:	cd 54       	subi	r28, 0x4D	; 77
     bfc:	df 4f       	sbci	r29, 0xFF	; 255
     bfe:	98 83       	st	Y, r25
     c00:	c3 5b       	subi	r28, 0xB3	; 179
     c02:	d0 40       	sbci	r29, 0x00	; 0
     c04:	cd 54       	subi	r28, 0x4D	; 77
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	e8 81       	ld	r30, Y
     c0a:	c3 5b       	subi	r28, 0xB3	; 179
     c0c:	d0 40       	sbci	r29, 0x00	; 0
     c0e:	ee 23       	and	r30, r30
     c10:	31 f6       	brne	.-116    	; 0xb9e <main+0x58>
	UART_init(&UConfig);
     c12:	ce 01       	movw	r24, r28
     c14:	8a 55       	subi	r24, 0x5A	; 90
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	0e 94 17 1a 	call	0x342e	; 0x342e <UART_init>

	TimerConfig T0_Configuration={NORMAL,F_CPU_1024,0,0};  // TIMER0 CONFIGURATIONS
     c1c:	ce 01       	movw	r24, r28
     c1e:	87 55       	subi	r24, 0x57	; 87
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	cc 54       	subi	r28, 0x4C	; 76
     c24:	df 4f       	sbci	r29, 0xFF	; 255
     c26:	99 83       	std	Y+1, r25	; 0x01
     c28:	88 83       	st	Y, r24
     c2a:	c4 5b       	subi	r28, 0xB4	; 180
     c2c:	d0 40       	sbci	r29, 0x00	; 0
     c2e:	8f ee       	ldi	r24, 0xEF	; 239
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	ca 54       	subi	r28, 0x4A	; 74
     c34:	df 4f       	sbci	r29, 0xFF	; 255
     c36:	99 83       	std	Y+1, r25	; 0x01
     c38:	88 83       	st	Y, r24
     c3a:	c6 5b       	subi	r28, 0xB6	; 182
     c3c:	d0 40       	sbci	r29, 0x00	; 0
     c3e:	96 e0       	ldi	r25, 0x06	; 6
     c40:	c8 54       	subi	r28, 0x48	; 72
     c42:	df 4f       	sbci	r29, 0xFF	; 255
     c44:	98 83       	st	Y, r25
     c46:	c8 5b       	subi	r28, 0xB8	; 184
     c48:	d0 40       	sbci	r29, 0x00	; 0
     c4a:	ca 54       	subi	r28, 0x4A	; 74
     c4c:	df 4f       	sbci	r29, 0xFF	; 255
     c4e:	e8 81       	ld	r30, Y
     c50:	f9 81       	ldd	r31, Y+1	; 0x01
     c52:	c6 5b       	subi	r28, 0xB6	; 182
     c54:	d0 40       	sbci	r29, 0x00	; 0
     c56:	00 80       	ld	r0, Z
     c58:	ca 54       	subi	r28, 0x4A	; 74
     c5a:	df 4f       	sbci	r29, 0xFF	; 255
     c5c:	88 81       	ld	r24, Y
     c5e:	99 81       	ldd	r25, Y+1	; 0x01
     c60:	c6 5b       	subi	r28, 0xB6	; 182
     c62:	d0 40       	sbci	r29, 0x00	; 0
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	ca 54       	subi	r28, 0x4A	; 74
     c68:	df 4f       	sbci	r29, 0xFF	; 255
     c6a:	99 83       	std	Y+1, r25	; 0x01
     c6c:	88 83       	st	Y, r24
     c6e:	c6 5b       	subi	r28, 0xB6	; 182
     c70:	d0 40       	sbci	r29, 0x00	; 0
     c72:	cc 54       	subi	r28, 0x4C	; 76
     c74:	df 4f       	sbci	r29, 0xFF	; 255
     c76:	e8 81       	ld	r30, Y
     c78:	f9 81       	ldd	r31, Y+1	; 0x01
     c7a:	c4 5b       	subi	r28, 0xB4	; 180
     c7c:	d0 40       	sbci	r29, 0x00	; 0
     c7e:	00 82       	st	Z, r0
     c80:	cc 54       	subi	r28, 0x4C	; 76
     c82:	df 4f       	sbci	r29, 0xFF	; 255
     c84:	88 81       	ld	r24, Y
     c86:	99 81       	ldd	r25, Y+1	; 0x01
     c88:	c4 5b       	subi	r28, 0xB4	; 180
     c8a:	d0 40       	sbci	r29, 0x00	; 0
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	cc 54       	subi	r28, 0x4C	; 76
     c90:	df 4f       	sbci	r29, 0xFF	; 255
     c92:	99 83       	std	Y+1, r25	; 0x01
     c94:	88 83       	st	Y, r24
     c96:	c4 5b       	subi	r28, 0xB4	; 180
     c98:	d0 40       	sbci	r29, 0x00	; 0
     c9a:	c8 54       	subi	r28, 0x48	; 72
     c9c:	df 4f       	sbci	r29, 0xFF	; 255
     c9e:	98 81       	ld	r25, Y
     ca0:	c8 5b       	subi	r28, 0xB8	; 184
     ca2:	d0 40       	sbci	r29, 0x00	; 0
     ca4:	91 50       	subi	r25, 0x01	; 1
     ca6:	c8 54       	subi	r28, 0x48	; 72
     ca8:	df 4f       	sbci	r29, 0xFF	; 255
     caa:	98 83       	st	Y, r25
     cac:	c8 5b       	subi	r28, 0xB8	; 184
     cae:	d0 40       	sbci	r29, 0x00	; 0
     cb0:	c8 54       	subi	r28, 0x48	; 72
     cb2:	df 4f       	sbci	r29, 0xFF	; 255
     cb4:	e8 81       	ld	r30, Y
     cb6:	c8 5b       	subi	r28, 0xB8	; 184
     cb8:	d0 40       	sbci	r29, 0x00	; 0
     cba:	ee 23       	and	r30, r30
     cbc:	31 f6       	brne	.-116    	; 0xc4a <main+0x104>
	Timer0_init(&T0_Configuration); 			 //Initialize timer0
     cbe:	ce 01       	movw	r24, r28
     cc0:	87 55       	subi	r24, 0x57	; 87
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	0e 94 99 19 	call	0x3332	; 0x3332 <Timer0_init>
	SREG |= (1<<7);
     cc8:	af e5       	ldi	r26, 0x5F	; 95
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ef e5       	ldi	r30, 0x5F	; 95
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 68       	ori	r24, 0x80	; 128
     cd4:	8c 93       	st	X, r24
	/*******************************************************************************
	 *                       For First Time                          *
	 *******************************************************************************/
do{
	//                                      ENTERING PASSWORD
	LCD_clearScreen();
     cd6:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	LCD_displayString("Enter Password");
     cda:	80 e6       	ldi	r24, 0x60	; 96
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
	EnterPW( PW );            					 // SEND ADDRESS OF password[4] TO EnterPW()
     ce2:	ce 01       	movw	r24, r28
     ce4:	83 56       	subi	r24, 0x63	; 99
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <EnterPW>
     cec:	fe 01       	movw	r30, r28
     cee:	e9 56       	subi	r30, 0x69	; 105
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a2 e0       	ldi	r26, 0x02	; 2
     cf8:	b3 e4       	ldi	r27, 0x43	; 67
     cfa:	80 83       	st	Z, r24
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	a2 83       	std	Z+2, r26	; 0x02
     d00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d02:	8e 01       	movw	r16, r28
     d04:	0d 56       	subi	r16, 0x6D	; 109
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	fe 01       	movw	r30, r28
     d0a:	e9 56       	subi	r30, 0x69	; 105
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	4a e7       	ldi	r20, 0x7A	; 122
     d1c:	53 e4       	ldi	r21, 0x43	; 67
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	f8 01       	movw	r30, r16
     d28:	80 83       	st	Z, r24
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	a2 83       	std	Z+2, r26	; 0x02
     d2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d30:	fe 01       	movw	r30, r28
     d32:	ed 56       	subi	r30, 0x6D	; 109
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e8       	ldi	r20, 0x80	; 128
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	44 f4       	brge	.+16     	; 0xd5e <main+0x218>
		__ticks = 1;
     d4e:	fe 01       	movw	r30, r28
     d50:	ef 56       	subi	r30, 0x6F	; 111
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
     d5c:	64 c0       	rjmp	.+200    	; 0xe26 <main+0x2e0>
	else if (__tmp > 65535)
     d5e:	fe 01       	movw	r30, r28
     d60:	ed 56       	subi	r30, 0x6D	; 109
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <main+0x238>
     d7c:	43 c0       	rjmp	.+134    	; 0xe04 <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7e:	fe 01       	movw	r30, r28
     d80:	e9 56       	subi	r30, 0x69	; 105
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	8e 01       	movw	r16, r28
     d9e:	0f 56       	subi	r16, 0x6F	; 111
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	f8 01       	movw	r30, r16
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
     db4:	1f c0       	rjmp	.+62     	; 0xdf4 <main+0x2ae>
     db6:	fe 01       	movw	r30, r28
     db8:	e1 57       	subi	r30, 0x71	; 113
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	89 e1       	ldi	r24, 0x19	; 25
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc4:	fe 01       	movw	r30, r28
     dc6:	e1 57       	subi	r30, 0x71	; 113
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <main+0x288>
     dd2:	fe 01       	movw	r30, r28
     dd4:	e1 57       	subi	r30, 0x71	; 113
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	de 01       	movw	r26, r28
     dde:	af 56       	subi	r26, 0x6F	; 111
     de0:	bf 4f       	sbci	r27, 0xFF	; 255
     de2:	fe 01       	movw	r30, r28
     de4:	ef 56       	subi	r30, 0x6F	; 111
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	11 96       	adiw	r26, 0x01	; 1
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	fe 01       	movw	r30, r28
     df6:	ef 56       	subi	r30, 0x6F	; 111
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	d1 f6       	brne	.-76     	; 0xdb6 <main+0x270>
     e02:	27 c0       	rjmp	.+78     	; 0xe52 <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	8e 01       	movw	r16, r28
     e06:	0f 56       	subi	r16, 0x6F	; 111
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	fe 01       	movw	r30, r28
     e0c:	ed 56       	subi	r30, 0x6D	; 109
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	f8 01       	movw	r30, r16
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
     e26:	de 01       	movw	r26, r28
     e28:	a3 57       	subi	r26, 0x73	; 115
     e2a:	bf 4f       	sbci	r27, 0xFF	; 255
     e2c:	fe 01       	movw	r30, r28
     e2e:	ef 56       	subi	r30, 0x6F	; 111
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	8d 93       	st	X+, r24
     e38:	9c 93       	st	X, r25
     e3a:	fe 01       	movw	r30, r28
     e3c:	e3 57       	subi	r30, 0x73	; 115
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <main+0x2fe>
     e48:	fe 01       	movw	r30, r28
     e4a:	e3 57       	subi	r30, 0x73	; 115
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
	_delay_ms(DELAY_UART);
	SendPW_UART ( PW );
     e52:	ce 01       	movw	r24, r28
     e54:	83 56       	subi	r24, 0x63	; 99
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <SendPW_UART>
	// 									RE-ENTERING PASSWORD
	LCD_clearScreen();
     e5c:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	LCD_displayString("RE-Enter PW");
     e60:	8f e6       	ldi	r24, 0x6F	; 111
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
	EnterPW(confirm_pw);
     e68:	ce 01       	movw	r24, r28
     e6a:	8f 55       	subi	r24, 0x5F	; 95
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <EnterPW>
     e72:	fe 01       	movw	r30, r28
     e74:	e7 57       	subi	r30, 0x77	; 119
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a2 e0       	ldi	r26, 0x02	; 2
     e7e:	b3 e4       	ldi	r27, 0x43	; 67
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	8e 01       	movw	r16, r28
     e8a:	0b 57       	subi	r16, 0x7B	; 123
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	fe 01       	movw	r30, r28
     e90:	e7 57       	subi	r30, 0x77	; 119
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a e7       	ldi	r20, 0x7A	; 122
     ea2:	53 e4       	ldi	r21, 0x43	; 67
     ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	f8 01       	movw	r30, r16
     eae:	80 83       	st	Z, r24
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	a2 83       	std	Z+2, r26	; 0x02
     eb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eb6:	fe 01       	movw	r30, r28
     eb8:	eb 57       	subi	r30, 0x7B	; 123
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	44 f4       	brge	.+16     	; 0xee4 <main+0x39e>
		__ticks = 1;
     ed4:	fe 01       	movw	r30, r28
     ed6:	ed 57       	subi	r30, 0x7D	; 125
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	64 c0       	rjmp	.+200    	; 0xfac <main+0x466>
	else if (__tmp > 65535)
     ee4:	fe 01       	movw	r30, r28
     ee6:	eb 57       	subi	r30, 0x7B	; 123
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     efe:	18 16       	cp	r1, r24
     f00:	0c f0       	brlt	.+2      	; 0xf04 <main+0x3be>
     f02:	43 c0       	rjmp	.+134    	; 0xf8a <main+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	fe 01       	movw	r30, r28
     f06:	e7 57       	subi	r30, 0x77	; 119
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	8e 01       	movw	r16, r28
     f24:	0d 57       	subi	r16, 0x7D	; 125
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	f8 01       	movw	r30, r16
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	1f c0       	rjmp	.+62     	; 0xf7a <main+0x434>
     f3c:	fe 01       	movw	r30, r28
     f3e:	ef 57       	subi	r30, 0x7F	; 127
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	89 e1       	ldi	r24, 0x19	; 25
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
     f4a:	fe 01       	movw	r30, r28
     f4c:	ef 57       	subi	r30, 0x7F	; 127
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <main+0x40e>
     f58:	fe 01       	movw	r30, r28
     f5a:	ef 57       	subi	r30, 0x7F	; 127
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	de 01       	movw	r26, r28
     f64:	ad 57       	subi	r26, 0x7D	; 125
     f66:	bf 4f       	sbci	r27, 0xFF	; 255
     f68:	fe 01       	movw	r30, r28
     f6a:	ed 57       	subi	r30, 0x7D	; 125
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	9c 93       	st	X, r25
     f78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	fe 01       	movw	r30, r28
     f7c:	ed 57       	subi	r30, 0x7D	; 125
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	d1 f6       	brne	.-76     	; 0xf3c <main+0x3f6>
     f88:	27 c0       	rjmp	.+78     	; 0xfd8 <main+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	8e 01       	movw	r16, r28
     f8c:	0d 57       	subi	r16, 0x7D	; 125
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	fe 01       	movw	r30, r28
     f92:	eb 57       	subi	r30, 0x7B	; 123
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	f8 01       	movw	r30, r16
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	de 01       	movw	r26, r28
     fae:	a1 58       	subi	r26, 0x81	; 129
     fb0:	bf 4f       	sbci	r27, 0xFF	; 255
     fb2:	fe 01       	movw	r30, r28
     fb4:	ed 57       	subi	r30, 0x7D	; 125
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	8d 93       	st	X+, r24
     fbe:	9c 93       	st	X, r25
     fc0:	fe 01       	movw	r30, r28
     fc2:	e1 58       	subi	r30, 0x81	; 129
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <main+0x484>
     fce:	fe 01       	movw	r30, r28
     fd0:	e1 58       	subi	r30, 0x81	; 129
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
	_delay_ms(DELAY_UART);
	SendPW_UART ( confirm_pw );
     fd8:	ce 01       	movw	r24, r28
     fda:	8f 55       	subi	r24, 0x5F	; 95
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <SendPW_UART>
	//									Verifying Password
	//+++++++++++++++++++ MCU2 will check if password ok -> 1 and if not ->0
	check_pw = UART_receiveByte();
     fe2:	0e 94 b1 1a 	call	0x3562	; 0x3562 <UART_receiveByte>
     fe6:	fe 01       	movw	r30, r28
     fe8:	eb 55       	subi	r30, 0x5B	; 91
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	80 83       	st	Z, r24
	// send message to user if not valid
	if(check_pw==0)
     fee:	fe 01       	movw	r30, r28
     ff0:	eb 55       	subi	r30, 0x5B	; 91
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	80 81       	ld	r24, Z
     ff6:	88 23       	and	r24, r24
     ff8:	09 f0       	breq	.+2      	; 0xffc <main+0x4b6>
     ffa:	bd c0       	rjmp	.+378    	; 0x1176 <main+0x630>
	{
		LCD_clearScreen();
     ffc:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,4,"INVALID");
    1000:	2b e7       	ldi	r18, 0x7B	; 123
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	64 e0       	ldi	r22, 0x04	; 4
    1008:	a9 01       	movw	r20, r18
    100a:	0e 94 ed 18 	call	0x31da	; 0x31da <LCD_displayStringRowColumn>
    100e:	fe 01       	movw	r30, r28
    1010:	e5 58       	subi	r30, 0x85	; 133
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e4       	ldi	r25, 0x40	; 64
    1018:	ac e1       	ldi	r26, 0x1C	; 28
    101a:	b5 e4       	ldi	r27, 0x45	; 69
    101c:	80 83       	st	Z, r24
    101e:	91 83       	std	Z+1, r25	; 0x01
    1020:	a2 83       	std	Z+2, r26	; 0x02
    1022:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1024:	8e 01       	movw	r16, r28
    1026:	09 58       	subi	r16, 0x89	; 137
    1028:	1f 4f       	sbci	r17, 0xFF	; 255
    102a:	fe 01       	movw	r30, r28
    102c:	e5 58       	subi	r30, 0x85	; 133
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a e7       	ldi	r20, 0x7A	; 122
    103e:	53 e4       	ldi	r21, 0x43	; 67
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	f8 01       	movw	r30, r16
    104a:	80 83       	st	Z, r24
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	a2 83       	std	Z+2, r26	; 0x02
    1050:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1052:	fe 01       	movw	r30, r28
    1054:	e9 58       	subi	r30, 0x89	; 137
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	60 81       	ld	r22, Z
    105a:	71 81       	ldd	r23, Z+1	; 0x01
    105c:	82 81       	ldd	r24, Z+2	; 0x02
    105e:	93 81       	ldd	r25, Z+3	; 0x03
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	44 f4       	brge	.+16     	; 0x1080 <main+0x53a>
		__ticks = 1;
    1070:	fe 01       	movw	r30, r28
    1072:	eb 58       	subi	r30, 0x8B	; 139
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
    107e:	64 c0       	rjmp	.+200    	; 0x1148 <main+0x602>
	else if (__tmp > 65535)
    1080:	fe 01       	movw	r30, r28
    1082:	e9 58       	subi	r30, 0x89	; 137
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	0c f0       	brlt	.+2      	; 0x10a0 <main+0x55a>
    109e:	43 c0       	rjmp	.+134    	; 0x1126 <main+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	fe 01       	movw	r30, r28
    10a2:	e5 58       	subi	r30, 0x85	; 133
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	82 81       	ldd	r24, Z+2	; 0x02
    10ac:	93 81       	ldd	r25, Z+3	; 0x03
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	8e 01       	movw	r16, r28
    10c0:	0b 58       	subi	r16, 0x8B	; 139
    10c2:	1f 4f       	sbci	r17, 0xFF	; 255
    10c4:	bc 01       	movw	r22, r24
    10c6:	cd 01       	movw	r24, r26
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	f8 01       	movw	r30, r16
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	80 83       	st	Z, r24
    10d6:	1f c0       	rjmp	.+62     	; 0x1116 <main+0x5d0>
    10d8:	fe 01       	movw	r30, r28
    10da:	ed 58       	subi	r30, 0x8D	; 141
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	89 e1       	ldi	r24, 0x19	; 25
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	80 83       	st	Z, r24
    10e6:	fe 01       	movw	r30, r28
    10e8:	ed 58       	subi	r30, 0x8D	; 141
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <main+0x5aa>
    10f4:	fe 01       	movw	r30, r28
    10f6:	ed 58       	subi	r30, 0x8D	; 141
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fe:	de 01       	movw	r26, r28
    1100:	ab 58       	subi	r26, 0x8B	; 139
    1102:	bf 4f       	sbci	r27, 0xFF	; 255
    1104:	fe 01       	movw	r30, r28
    1106:	eb 58       	subi	r30, 0x8B	; 139
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	11 96       	adiw	r26, 0x01	; 1
    1112:	9c 93       	st	X, r25
    1114:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1116:	fe 01       	movw	r30, r28
    1118:	eb 58       	subi	r30, 0x8B	; 139
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	d1 f6       	brne	.-76     	; 0x10d8 <main+0x592>
    1124:	28 c0       	rjmp	.+80     	; 0x1176 <main+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1126:	8e 01       	movw	r16, r28
    1128:	0b 58       	subi	r16, 0x8B	; 139
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	fe 01       	movw	r30, r28
    112e:	e9 58       	subi	r30, 0x89	; 137
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	de 01       	movw	r26, r28
    114a:	af 58       	subi	r26, 0x8F	; 143
    114c:	bf 4f       	sbci	r27, 0xFF	; 255
    114e:	fe 01       	movw	r30, r28
    1150:	eb 58       	subi	r30, 0x8B	; 139
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 81       	ld	r24, Z
    1156:	91 81       	ldd	r25, Z+1	; 0x01
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	9c 93       	st	X, r25
    115c:	8e 93       	st	-X, r24
    115e:	fe 01       	movw	r30, r28
    1160:	ef 58       	subi	r30, 0x8F	; 143
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <main+0x622>
    116c:	fe 01       	movw	r30, r28
    116e:	ef 58       	subi	r30, 0x8F	; 143
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
		_delay_ms(DELAY_Keypad);
	}
	// if password okay get out from do-while loop
}while (check_pw== 0);
    1176:	fe 01       	movw	r30, r28
    1178:	eb 55       	subi	r30, 0x5B	; 91
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <main+0x63e>
    1182:	a9 cd       	rjmp	.-1198   	; 0xcd6 <main+0x190>
	LCD_clearScreen();
    1184:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	LCD_displayString("Correct");
    1188:	83 e8       	ldi	r24, 0x83	; 131
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
    1190:	fe 01       	movw	r30, r28
    1192:	e3 59       	subi	r30, 0x93	; 147
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e4       	ldi	r25, 0x40	; 64
    119a:	ac e1       	ldi	r26, 0x1C	; 28
    119c:	b5 e4       	ldi	r27, 0x45	; 69
    119e:	80 83       	st	Z, r24
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	a2 83       	std	Z+2, r26	; 0x02
    11a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a6:	8e 01       	movw	r16, r28
    11a8:	07 59       	subi	r16, 0x97	; 151
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	fe 01       	movw	r30, r28
    11ae:	e3 59       	subi	r30, 0x93	; 147
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a e7       	ldi	r20, 0x7A	; 122
    11c0:	53 e4       	ldi	r21, 0x43	; 67
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	f8 01       	movw	r30, r16
    11cc:	80 83       	st	Z, r24
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	a2 83       	std	Z+2, r26	; 0x02
    11d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d4:	fe 01       	movw	r30, r28
    11d6:	e7 59       	subi	r30, 0x97	; 151
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	44 f4       	brge	.+16     	; 0x1202 <main+0x6bc>
		__ticks = 1;
    11f2:	fe 01       	movw	r30, r28
    11f4:	e9 59       	subi	r30, 0x99	; 153
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	80 83       	st	Z, r24
    1200:	64 c0       	rjmp	.+200    	; 0x12ca <main+0x784>
	else if (__tmp > 65535)
    1202:	fe 01       	movw	r30, r28
    1204:	e7 59       	subi	r30, 0x97	; 151
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    121c:	18 16       	cp	r1, r24
    121e:	0c f0       	brlt	.+2      	; 0x1222 <main+0x6dc>
    1220:	43 c0       	rjmp	.+134    	; 0x12a8 <main+0x762>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1222:	fe 01       	movw	r30, r28
    1224:	e3 59       	subi	r30, 0x93	; 147
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8e 01       	movw	r16, r28
    1242:	09 59       	subi	r16, 0x99	; 153
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	f8 01       	movw	r30, r16
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
    1258:	1f c0       	rjmp	.+62     	; 0x1298 <main+0x752>
    125a:	fe 01       	movw	r30, r28
    125c:	eb 59       	subi	r30, 0x9B	; 155
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	89 e1       	ldi	r24, 0x19	; 25
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
    1268:	fe 01       	movw	r30, r28
    126a:	eb 59       	subi	r30, 0x9B	; 155
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <main+0x72c>
    1276:	fe 01       	movw	r30, r28
    1278:	eb 59       	subi	r30, 0x9B	; 155
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	de 01       	movw	r26, r28
    1282:	a9 59       	subi	r26, 0x99	; 153
    1284:	bf 4f       	sbci	r27, 0xFF	; 255
    1286:	fe 01       	movw	r30, r28
    1288:	e9 59       	subi	r30, 0x99	; 153
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	11 96       	adiw	r26, 0x01	; 1
    1294:	9c 93       	st	X, r25
    1296:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	fe 01       	movw	r30, r28
    129a:	e9 59       	subi	r30, 0x99	; 153
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	d1 f6       	brne	.-76     	; 0x125a <main+0x714>
    12a6:	27 c0       	rjmp	.+78     	; 0x12f6 <main+0x7b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	8e 01       	movw	r16, r28
    12aa:	09 59       	subi	r16, 0x99	; 153
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	fe 01       	movw	r30, r28
    12b0:	e7 59       	subi	r30, 0x97	; 151
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	f8 01       	movw	r30, r16
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	80 83       	st	Z, r24
    12ca:	de 01       	movw	r26, r28
    12cc:	ad 59       	subi	r26, 0x9D	; 157
    12ce:	bf 4f       	sbci	r27, 0xFF	; 255
    12d0:	fe 01       	movw	r30, r28
    12d2:	e9 59       	subi	r30, 0x99	; 153
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	8d 93       	st	X+, r24
    12dc:	9c 93       	st	X, r25
    12de:	fe 01       	movw	r30, r28
    12e0:	ed 59       	subi	r30, 0x9D	; 157
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	80 81       	ld	r24, Z
    12e6:	91 81       	ldd	r25, Z+1	; 0x01
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <main+0x7a2>
    12ec:	fe 01       	movw	r30, r28
    12ee:	ed 59       	subi	r30, 0x9D	; 157
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24

	/*******************************************************************************
		 *                      Change password                         *
		 *******************************************************************************/
	while(1){
	LCD_clearScreen();
    12f6:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ :Change PW");
    12fa:	2b e8       	ldi	r18, 0x8B	; 139
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	0e 94 ed 18 	call	0x31da	; 0x31da <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- :open");
    1308:	28 e9       	ldi	r18, 0x98	; 152
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	a9 01       	movw	r20, r18
    1312:	0e 94 ed 18 	call	0x31da	; 0x31da <LCD_displayStringRowColumn>

	// save user choice and then send it to MC2
	command=KEYPAD_getPressedKey();
    1316:	0e 94 7d 13 	call	0x26fa	; 0x26fa <KEYPAD_getPressedKey>
    131a:	fe 01       	movw	r30, r28
    131c:	e4 56       	subi	r30, 0x64	; 100
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	80 83       	st	Z, r24
    1322:	fe 01       	movw	r30, r28
    1324:	e1 5a       	subi	r30, 0xA1	; 161
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e4       	ldi	r25, 0x40	; 64
    132c:	ac e1       	ldi	r26, 0x1C	; 28
    132e:	b5 e4       	ldi	r27, 0x45	; 69
    1330:	80 83       	st	Z, r24
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	a2 83       	std	Z+2, r26	; 0x02
    1336:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1338:	8e 01       	movw	r16, r28
    133a:	05 5a       	subi	r16, 0xA5	; 165
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	fe 01       	movw	r30, r28
    1340:	e1 5a       	subi	r30, 0xA1	; 161
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4a e7       	ldi	r20, 0x7A	; 122
    1352:	53 e4       	ldi	r21, 0x43	; 67
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	f8 01       	movw	r30, r16
    135e:	80 83       	st	Z, r24
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	a2 83       	std	Z+2, r26	; 0x02
    1364:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1366:	fe 01       	movw	r30, r28
    1368:	e5 5a       	subi	r30, 0xA5	; 165
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e8       	ldi	r20, 0x80	; 128
    137a:	5f e3       	ldi	r21, 0x3F	; 63
    137c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	44 f4       	brge	.+16     	; 0x1394 <main+0x84e>
		__ticks = 1;
    1384:	fe 01       	movw	r30, r28
    1386:	e7 5a       	subi	r30, 0xA7	; 167
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	91 83       	std	Z+1, r25	; 0x01
    1390:	80 83       	st	Z, r24
    1392:	64 c0       	rjmp	.+200    	; 0x145c <main+0x916>
	else if (__tmp > 65535)
    1394:	fe 01       	movw	r30, r28
    1396:	e5 5a       	subi	r30, 0xA5	; 165
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	57 e4       	ldi	r21, 0x47	; 71
    13aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	0c f0       	brlt	.+2      	; 0x13b4 <main+0x86e>
    13b2:	43 c0       	rjmp	.+134    	; 0x143a <main+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	fe 01       	movw	r30, r28
    13b6:	e1 5a       	subi	r30, 0xA1	; 161
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	60 81       	ld	r22, Z
    13bc:	71 81       	ldd	r23, Z+1	; 0x01
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	93 81       	ldd	r25, Z+3	; 0x03
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e2       	ldi	r20, 0x20	; 32
    13c8:	51 e4       	ldi	r21, 0x41	; 65
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8e 01       	movw	r16, r28
    13d4:	07 5a       	subi	r16, 0xA7	; 167
    13d6:	1f 4f       	sbci	r17, 0xFF	; 255
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	f8 01       	movw	r30, r16
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
    13ea:	1f c0       	rjmp	.+62     	; 0x142a <main+0x8e4>
    13ec:	fe 01       	movw	r30, r28
    13ee:	e9 5a       	subi	r30, 0xA9	; 169
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	89 e1       	ldi	r24, 0x19	; 25
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	80 83       	st	Z, r24
    13fa:	fe 01       	movw	r30, r28
    13fc:	e9 5a       	subi	r30, 0xA9	; 169
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <main+0x8be>
    1408:	fe 01       	movw	r30, r28
    140a:	e9 5a       	subi	r30, 0xA9	; 169
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1412:	de 01       	movw	r26, r28
    1414:	a7 5a       	subi	r26, 0xA7	; 167
    1416:	bf 4f       	sbci	r27, 0xFF	; 255
    1418:	fe 01       	movw	r30, r28
    141a:	e7 5a       	subi	r30, 0xA7	; 167
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	9c 93       	st	X, r25
    1428:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142a:	fe 01       	movw	r30, r28
    142c:	e7 5a       	subi	r30, 0xA7	; 167
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	d1 f6       	brne	.-76     	; 0x13ec <main+0x8a6>
    1438:	27 c0       	rjmp	.+78     	; 0x1488 <main+0x942>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	8e 01       	movw	r16, r28
    143c:	07 5a       	subi	r16, 0xA7	; 167
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	fe 01       	movw	r30, r28
    1442:	e5 5a       	subi	r30, 0xA5	; 165
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	60 81       	ld	r22, Z
    1448:	71 81       	ldd	r23, Z+1	; 0x01
    144a:	82 81       	ldd	r24, Z+2	; 0x02
    144c:	93 81       	ldd	r25, Z+3	; 0x03
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	f8 01       	movw	r30, r16
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
    145c:	de 01       	movw	r26, r28
    145e:	ab 5a       	subi	r26, 0xAB	; 171
    1460:	bf 4f       	sbci	r27, 0xFF	; 255
    1462:	fe 01       	movw	r30, r28
    1464:	e7 5a       	subi	r30, 0xA7	; 167
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	8d 93       	st	X+, r24
    146e:	9c 93       	st	X, r25
    1470:	fe 01       	movw	r30, r28
    1472:	eb 5a       	subi	r30, 0xAB	; 171
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	80 81       	ld	r24, Z
    1478:	91 81       	ldd	r25, Z+1	; 0x01
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <main+0x934>
    147e:	fe 01       	movw	r30, r28
    1480:	eb 5a       	subi	r30, 0xAB	; 171
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
	_delay_ms(DELAY_Keypad);
	UART_sendByte(command);
    1488:	fe 01       	movw	r30, r28
    148a:	e4 56       	subi	r30, 0x64	; 100
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	80 81       	ld	r24, Z
    1490:	0e 94 9a 1a 	call	0x3534	; 0x3534 <UART_sendByte>
    1494:	fe 01       	movw	r30, r28
    1496:	ef 5a       	subi	r30, 0xAF	; 175
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a2 e0       	ldi	r26, 0x02	; 2
    14a0:	b3 e4       	ldi	r27, 0x43	; 67
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
    14a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	8e 01       	movw	r16, r28
    14ac:	03 5b       	subi	r16, 0xB3	; 179
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	ef 5a       	subi	r30, 0xAF	; 175
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a e7       	ldi	r20, 0x7A	; 122
    14c4:	53 e4       	ldi	r21, 0x43	; 67
    14c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d8:	fe 01       	movw	r30, r28
    14da:	e3 5b       	subi	r30, 0xB3	; 179
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e8       	ldi	r20, 0x80	; 128
    14ec:	5f e3       	ldi	r21, 0x3F	; 63
    14ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f2:	88 23       	and	r24, r24
    14f4:	44 f4       	brge	.+16     	; 0x1506 <main+0x9c0>
		__ticks = 1;
    14f6:	fe 01       	movw	r30, r28
    14f8:	e5 5b       	subi	r30, 0xB5	; 181
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	64 c0       	rjmp	.+200    	; 0x15ce <main+0xa88>
	else if (__tmp > 65535)
    1506:	fe 01       	movw	r30, r28
    1508:	e3 5b       	subi	r30, 0xB3	; 179
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	0c f0       	brlt	.+2      	; 0x1526 <main+0x9e0>
    1524:	43 c0       	rjmp	.+134    	; 0x15ac <main+0xa66>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	fe 01       	movw	r30, r28
    1528:	ef 5a       	subi	r30, 0xAF	; 175
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8e 01       	movw	r16, r28
    1546:	05 5b       	subi	r16, 0xB5	; 181
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
    155c:	1f c0       	rjmp	.+62     	; 0x159c <main+0xa56>
    155e:	fe 01       	movw	r30, r28
    1560:	e7 5b       	subi	r30, 0xB7	; 183
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	89 e1       	ldi	r24, 0x19	; 25
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    156c:	fe 01       	movw	r30, r28
    156e:	e7 5b       	subi	r30, 0xB7	; 183
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <main+0xa30>
    157a:	fe 01       	movw	r30, r28
    157c:	e7 5b       	subi	r30, 0xB7	; 183
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1584:	de 01       	movw	r26, r28
    1586:	a5 5b       	subi	r26, 0xB5	; 181
    1588:	bf 4f       	sbci	r27, 0xFF	; 255
    158a:	fe 01       	movw	r30, r28
    158c:	e5 5b       	subi	r30, 0xB5	; 181
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	11 96       	adiw	r26, 0x01	; 1
    1598:	9c 93       	st	X, r25
    159a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	fe 01       	movw	r30, r28
    159e:	e5 5b       	subi	r30, 0xB5	; 181
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	d1 f6       	brne	.-76     	; 0x155e <main+0xa18>
    15aa:	28 c0       	rjmp	.+80     	; 0x15fc <main+0xab6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	8e 01       	movw	r16, r28
    15ae:	05 5b       	subi	r16, 0xB5	; 181
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	e3 5b       	subi	r30, 0xB3	; 179
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	de 01       	movw	r26, r28
    15d0:	a9 5b       	subi	r26, 0xB9	; 185
    15d2:	bf 4f       	sbci	r27, 0xFF	; 255
    15d4:	fe 01       	movw	r30, r28
    15d6:	e5 5b       	subi	r30, 0xB5	; 181
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	9c 93       	st	X, r25
    15e2:	8e 93       	st	-X, r24
    15e4:	fe 01       	movw	r30, r28
    15e6:	e9 5b       	subi	r30, 0xB9	; 185
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <main+0xaa8>
    15f2:	fe 01       	movw	r30, r28
    15f4:	e9 5b       	subi	r30, 0xB9	; 185
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
	_delay_ms(DELAY_UART);

	//+++++++++++++++++++++++ Change PW (press + ) ++++++++++++++++++++++++++++


	if (command == '+')
    15fc:	fe 01       	movw	r30, r28
    15fe:	e4 56       	subi	r30, 0x64	; 100
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	8b 32       	cpi	r24, 0x2B	; 43
    1606:	09 f0       	breq	.+2      	; 0x160a <main+0xac4>
    1608:	ad c1       	rjmp	.+858    	; 0x1964 <main+0xe1e>
	        {
	        	do{
	        		//                                      ENTERING PASSWORD

	            LCD_clearScreen();
    160a:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	        	LCD_displayString("Enter Password");
    160e:	80 e6       	ldi	r24, 0x60	; 96
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
	        	EnterPW( PW );            					 // SEND ADDRESS OF password[4] TO EnterPW()
    1616:	ce 01       	movw	r24, r28
    1618:	83 56       	subi	r24, 0x63	; 99
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <EnterPW>
	        	SendPW_UART ( PW );						 	 // SEND PW TO MC2 via UART
    1620:	ce 01       	movw	r24, r28
    1622:	83 56       	subi	r24, 0x63	; 99
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <SendPW_UART>

	        	// 									RE-ENTERING PASSWORD

	            LCD_clearScreen();
    162a:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	        	LCD_displayString("Re-enter PW");
    162e:	80 ea       	ldi	r24, 0xA0	; 160
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
	        	EnterPW( confirm_pw );
    1636:	ce 01       	movw	r24, r28
    1638:	8f 55       	subi	r24, 0x5F	; 95
    163a:	9f 4f       	sbci	r25, 0xFF	; 255
    163c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <EnterPW>
	         	SendPW_UART ( confirm_pw );
    1640:	ce 01       	movw	r24, r28
    1642:	8f 55       	subi	r24, 0x5F	; 95
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <SendPW_UART>
	        	//									Verifying Password
	        	//+++++++++++++++++++ MCU2 will check if password ok -> 1 and if not ->0
	         	check_pw=UART_receiveByte();
    164a:	0e 94 b1 1a 	call	0x3562	; 0x3562 <UART_receiveByte>
    164e:	fe 01       	movw	r30, r28
    1650:	eb 55       	subi	r30, 0x5B	; 91
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 83       	st	Z, r24
    1656:	fe 01       	movw	r30, r28
    1658:	ed 5b       	subi	r30, 0xBD	; 189
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a2 e0       	ldi	r26, 0x02	; 2
    1662:	b3 e4       	ldi	r27, 0x43	; 67
    1664:	80 83       	st	Z, r24
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	a2 83       	std	Z+2, r26	; 0x02
    166a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166c:	8e 01       	movw	r16, r28
    166e:	01 5c       	subi	r16, 0xC1	; 193
    1670:	1f 4f       	sbci	r17, 0xFF	; 255
    1672:	fe 01       	movw	r30, r28
    1674:	ed 5b       	subi	r30, 0xBD	; 189
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a e7       	ldi	r20, 0x7A	; 122
    1686:	53 e4       	ldi	r21, 0x43	; 67
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	f8 01       	movw	r30, r16
    1692:	80 83       	st	Z, r24
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	a2 83       	std	Z+2, r26	; 0x02
    1698:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    169a:	fe 01       	movw	r30, r28
    169c:	ff 96       	adiw	r30, 0x3f	; 63
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <main+0xb7a>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9e af       	std	Y+62, r25	; 0x3e
    16bc:	8d af       	std	Y+61, r24	; 0x3d
    16be:	46 c0       	rjmp	.+140    	; 0x174c <main+0xc06>
	else if (__tmp > 65535)
    16c0:	fe 01       	movw	r30, r28
    16c2:	ff 96       	adiw	r30, 0x3f	; 63
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	64 f5       	brge	.+88     	; 0x1734 <main+0xbee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	fe 01       	movw	r30, r28
    16de:	ed 5b       	subi	r30, 0xBD	; 189
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e af       	std	Y+62, r25	; 0x3e
    1708:	8d af       	std	Y+61, r24	; 0x3d
    170a:	0f c0       	rjmp	.+30     	; 0x172a <main+0xbe4>
    170c:	89 e1       	ldi	r24, 0x19	; 25
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c af       	std	Y+60, r25	; 0x3c
    1712:	8b af       	std	Y+59, r24	; 0x3b
    1714:	8b ad       	ldd	r24, Y+59	; 0x3b
    1716:	9c ad       	ldd	r25, Y+60	; 0x3c
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <main+0xbd2>
    171c:	9c af       	std	Y+60, r25	; 0x3c
    171e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8d ad       	ldd	r24, Y+61	; 0x3d
    1722:	9e ad       	ldd	r25, Y+62	; 0x3e
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9e af       	std	Y+62, r25	; 0x3e
    1728:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8d ad       	ldd	r24, Y+61	; 0x3d
    172c:	9e ad       	ldd	r25, Y+62	; 0x3e
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <main+0xbc6>
    1732:	16 c0       	rjmp	.+44     	; 0x1760 <main+0xc1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	fe 01       	movw	r30, r28
    1736:	ff 96       	adiw	r30, 0x3f	; 63
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e af       	std	Y+62, r25	; 0x3e
    174a:	8d af       	std	Y+61, r24	; 0x3d
    174c:	8d ad       	ldd	r24, Y+61	; 0x3d
    174e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1750:	9a af       	std	Y+58, r25	; 0x3a
    1752:	89 af       	std	Y+57, r24	; 0x39
    1754:	89 ad       	ldd	r24, Y+57	; 0x39
    1756:	9a ad       	ldd	r25, Y+58	; 0x3a
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <main+0xc12>
    175c:	9a af       	std	Y+58, r25	; 0x3a
    175e:	89 af       	std	Y+57, r24	; 0x39
	         	_delay_ms(DELAY_UART);

	         	if (check_pw == 0)
    1760:	fe 01       	movw	r30, r28
    1762:	eb 55       	subi	r30, 0x5B	; 91
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	88 23       	and	r24, r24
    176a:	09 f0       	breq	.+2      	; 0x176e <main+0xc28>
    176c:	7b c0       	rjmp	.+246    	; 0x1864 <main+0xd1e>
	         	{
	         		LCD_clearScreen();
    176e:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	         		LCD_displayStringRowColumn(0,4,"INVALID");
    1772:	2b e7       	ldi	r18, 0x7B	; 123
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	64 e0       	ldi	r22, 0x04	; 4
    177a:	a9 01       	movw	r20, r18
    177c:	0e 94 ed 18 	call	0x31da	; 0x31da <LCD_displayStringRowColumn>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e4       	ldi	r25, 0x40	; 64
    1784:	ac e1       	ldi	r26, 0x1C	; 28
    1786:	b5 e4       	ldi	r27, 0x45	; 69
    1788:	8d ab       	std	Y+53, r24	; 0x35
    178a:	9e ab       	std	Y+54, r25	; 0x36
    178c:	af ab       	std	Y+55, r26	; 0x37
    178e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6d a9       	ldd	r22, Y+53	; 0x35
    1792:	7e a9       	ldd	r23, Y+54	; 0x36
    1794:	8f a9       	ldd	r24, Y+55	; 0x37
    1796:	98 ad       	ldd	r25, Y+56	; 0x38
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	53 e4       	ldi	r21, 0x43	; 67
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	89 ab       	std	Y+49, r24	; 0x31
    17aa:	9a ab       	std	Y+50, r25	; 0x32
    17ac:	ab ab       	std	Y+51, r26	; 0x33
    17ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17b0:	69 a9       	ldd	r22, Y+49	; 0x31
    17b2:	7a a9       	ldd	r23, Y+50	; 0x32
    17b4:	8b a9       	ldd	r24, Y+51	; 0x33
    17b6:	9c a9       	ldd	r25, Y+52	; 0x34
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <main+0xc8c>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <main+0xd0a>
	else if (__tmp > 65535)
    17d2:	69 a9       	ldd	r22, Y+49	; 0x31
    17d4:	7a a9       	ldd	r23, Y+50	; 0x32
    17d6:	8b a9       	ldd	r24, Y+51	; 0x33
    17d8:	9c a9       	ldd	r25, Y+52	; 0x34
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <main+0xcf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6d a9       	ldd	r22, Y+53	; 0x35
    17ec:	7e a9       	ldd	r23, Y+54	; 0x36
    17ee:	8f a9       	ldd	r24, Y+55	; 0x37
    17f0:	98 ad       	ldd	r25, Y+56	; 0x38
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	98 ab       	std	Y+48, r25	; 0x30
    1810:	8f a7       	std	Y+47, r24	; 0x2f
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <main+0xcec>
    1814:	89 e1       	ldi	r24, 0x19	; 25
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9e a7       	std	Y+46, r25	; 0x2e
    181a:	8d a7       	std	Y+45, r24	; 0x2d
    181c:	8d a5       	ldd	r24, Y+45	; 0x2d
    181e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <main+0xcda>
    1824:	9e a7       	std	Y+46, r25	; 0x2e
    1826:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	8f a5       	ldd	r24, Y+47	; 0x2f
    182a:	98 a9       	ldd	r25, Y+48	; 0x30
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	98 ab       	std	Y+48, r25	; 0x30
    1830:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	8f a5       	ldd	r24, Y+47	; 0x2f
    1834:	98 a9       	ldd	r25, Y+48	; 0x30
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <main+0xcce>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <main+0xd1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	69 a9       	ldd	r22, Y+49	; 0x31
    183e:	7a a9       	ldd	r23, Y+50	; 0x32
    1840:	8b a9       	ldd	r24, Y+51	; 0x33
    1842:	9c a9       	ldd	r25, Y+52	; 0x34
    1844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	98 ab       	std	Y+48, r25	; 0x30
    184e:	8f a7       	std	Y+47, r24	; 0x2f
    1850:	8f a5       	ldd	r24, Y+47	; 0x2f
    1852:	98 a9       	ldd	r25, Y+48	; 0x30
    1854:	9c a7       	std	Y+44, r25	; 0x2c
    1856:	8b a7       	std	Y+43, r24	; 0x2b
    1858:	8b a5       	ldd	r24, Y+43	; 0x2b
    185a:	9c a5       	ldd	r25, Y+44	; 0x2c
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <main+0xd16>
    1860:	9c a7       	std	Y+44, r25	; 0x2c
    1862:	8b a7       	std	Y+43, r24	; 0x2b
	         		_delay_ms(DELAY_Keypad);
	         	}

	            }while (check_pw == 0);
    1864:	fe 01       	movw	r30, r28
    1866:	eb 55       	subi	r30, 0x5B	; 91
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	88 23       	and	r24, r24
    186e:	09 f4       	brne	.+2      	; 0x1872 <main+0xd2c>
    1870:	cc ce       	rjmp	.-616    	; 0x160a <main+0xac4>

	            LCD_clearScreen();
    1872:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
	        	LCD_displayString("Password Changed");
    1876:	8c ea       	ldi	r24, 0xAC	; 172
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e4       	ldi	r25, 0x40	; 64
    1882:	ac e1       	ldi	r26, 0x1C	; 28
    1884:	b5 e4       	ldi	r27, 0x45	; 69
    1886:	8f a3       	std	Y+39, r24	; 0x27
    1888:	98 a7       	std	Y+40, r25	; 0x28
    188a:	a9 a7       	std	Y+41, r26	; 0x29
    188c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	6f a1       	ldd	r22, Y+39	; 0x27
    1890:	78 a5       	ldd	r23, Y+40	; 0x28
    1892:	89 a5       	ldd	r24, Y+41	; 0x29
    1894:	9a a5       	ldd	r25, Y+42	; 0x2a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	53 e4       	ldi	r21, 0x43	; 67
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8b a3       	std	Y+35, r24	; 0x23
    18a8:	9c a3       	std	Y+36, r25	; 0x24
    18aa:	ad a3       	std	Y+37, r26	; 0x25
    18ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ae:	6b a1       	ldd	r22, Y+35	; 0x23
    18b0:	7c a1       	ldd	r23, Y+36	; 0x24
    18b2:	8d a1       	ldd	r24, Y+37	; 0x25
    18b4:	9e a1       	ldd	r25, Y+38	; 0x26
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <main+0xd8a>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9a a3       	std	Y+34, r25	; 0x22
    18cc:	89 a3       	std	Y+33, r24	; 0x21
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <main+0xe08>
	else if (__tmp > 65535)
    18d0:	6b a1       	ldd	r22, Y+35	; 0x23
    18d2:	7c a1       	ldd	r23, Y+36	; 0x24
    18d4:	8d a1       	ldd	r24, Y+37	; 0x25
    18d6:	9e a1       	ldd	r25, Y+38	; 0x26
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <main+0xdf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	6f a1       	ldd	r22, Y+39	; 0x27
    18ea:	78 a5       	ldd	r23, Y+40	; 0x28
    18ec:	89 a5       	ldd	r24, Y+41	; 0x29
    18ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9a a3       	std	Y+34, r25	; 0x22
    190e:	89 a3       	std	Y+33, r24	; 0x21
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <main+0xdea>
    1912:	89 e1       	ldi	r24, 0x19	; 25
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	98 a3       	std	Y+32, r25	; 0x20
    1918:	8f 8f       	std	Y+31, r24	; 0x1f
    191a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    191c:	98 a1       	ldd	r25, Y+32	; 0x20
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <main+0xdd8>
    1922:	98 a3       	std	Y+32, r25	; 0x20
    1924:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	89 a1       	ldd	r24, Y+33	; 0x21
    1928:	9a a1       	ldd	r25, Y+34	; 0x22
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9a a3       	std	Y+34, r25	; 0x22
    192e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	89 a1       	ldd	r24, Y+33	; 0x21
    1932:	9a a1       	ldd	r25, Y+34	; 0x22
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <main+0xdcc>
    1938:	de cc       	rjmp	.-1604   	; 0x12f6 <main+0x7b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	6b a1       	ldd	r22, Y+35	; 0x23
    193c:	7c a1       	ldd	r23, Y+36	; 0x24
    193e:	8d a1       	ldd	r24, Y+37	; 0x25
    1940:	9e a1       	ldd	r25, Y+38	; 0x26
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9a a3       	std	Y+34, r25	; 0x22
    194c:	89 a3       	std	Y+33, r24	; 0x21
    194e:	89 a1       	ldd	r24, Y+33	; 0x21
    1950:	9a a1       	ldd	r25, Y+34	; 0x22
    1952:	9e 8f       	std	Y+30, r25	; 0x1e
    1954:	8d 8f       	std	Y+29, r24	; 0x1d
    1956:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1958:	9e 8d       	ldd	r25, Y+30	; 0x1e
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <main+0xe14>
    195e:	9e 8f       	std	Y+30, r25	; 0x1e
    1960:	8d 8f       	std	Y+29, r24	; 0x1d
    1962:	c9 cc       	rjmp	.-1646   	; 0x12f6 <main+0x7b0>
	            _delay_ms(DELAY_Keypad);
	        }
	//+++++++++++++++++++++++ open  (press - ) ++++++++++++++++++++++++++++
	else if(command == '-'){
    1964:	fe 01       	movw	r30, r28
    1966:	e4 56       	subi	r30, 0x64	; 100
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	80 81       	ld	r24, Z
    196c:	8d 32       	cpi	r24, 0x2D	; 45
    196e:	09 f0       	breq	.+2      	; 0x1972 <main+0xe2c>
    1970:	c2 cc       	rjmp	.-1660   	; 0x12f6 <main+0x7b0>

		// here we need to check if pass matches what the user saved in EEPROM
		uint8 count=0;
    1972:	fe 01       	movw	r30, r28
    1974:	e5 56       	subi	r30, 0x65	; 101
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	10 82       	st	Z, r1

		do{
			 count++;
    197a:	de 01       	movw	r26, r28
    197c:	a5 56       	subi	r26, 0x65	; 101
    197e:	bf 4f       	sbci	r27, 0xFF	; 255
    1980:	fe 01       	movw	r30, r28
    1982:	e5 56       	subi	r30, 0x65	; 101
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	80 81       	ld	r24, Z
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	8c 93       	st	X, r24
			 //                                      ENTERING PASSWORD
			 LCD_clearScreen();
    198c:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
			 LCD_displayString("Enter Password");
    1990:	80 e6       	ldi	r24, 0x60	; 96
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
			 EnterPW( PW );            					 // SEND ADDRESS OF password[4] TO EnterPW()
    1998:	ce 01       	movw	r24, r28
    199a:	83 56       	subi	r24, 0x63	; 99
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <EnterPW>
			 SendPW_UART ( PW );						 	 // SEND PW TO MC2 via UART
    19a2:	ce 01       	movw	r24, r28
    19a4:	83 56       	subi	r24, 0x63	; 99
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <SendPW_UART>
			 //									Verifying Password
			 //+++++++++++++++++++ MCU2 will check if password ok -> 1 and if not ->0
			 check_pw=UART_receiveByte();
    19ac:	0e 94 b1 1a 	call	0x3562	; 0x3562 <UART_receiveByte>
    19b0:	fe 01       	movw	r30, r28
    19b2:	eb 55       	subi	r30, 0x5B	; 91
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 83       	st	Z, r24
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a2 e0       	ldi	r26, 0x02	; 2
    19be:	b3 e4       	ldi	r27, 0x43	; 67
    19c0:	89 8f       	std	Y+25, r24	; 0x19
    19c2:	9a 8f       	std	Y+26, r25	; 0x1a
    19c4:	ab 8f       	std	Y+27, r26	; 0x1b
    19c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a e7       	ldi	r20, 0x7A	; 122
    19d6:	53 e4       	ldi	r21, 0x43	; 67
    19d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	8d 8b       	std	Y+21, r24	; 0x15
    19e2:	9e 8b       	std	Y+22, r25	; 0x16
    19e4:	af 8b       	std	Y+23, r26	; 0x17
    19e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ea:	7e 89       	ldd	r23, Y+22	; 0x16
    19ec:	8f 89       	ldd	r24, Y+23	; 0x17
    19ee:	98 8d       	ldd	r25, Y+24	; 0x18
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <main+0xec4>
		__ticks = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9c 8b       	std	Y+20, r25	; 0x14
    1a06:	8b 8b       	std	Y+19, r24	; 0x13
    1a08:	3f c0       	rjmp	.+126    	; 0x1a88 <main+0xf42>
	else if (__tmp > 65535)
    1a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a10:	98 8d       	ldd	r25, Y+24	; 0x18
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	3f ef       	ldi	r19, 0xFF	; 255
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	57 e4       	ldi	r21, 0x47	; 71
    1a1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	4c f5       	brge	.+82     	; 0x1a74 <main+0xf2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	69 8d       	ldd	r22, Y+25	; 0x19
    1a24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9c 8b       	std	Y+20, r25	; 0x14
    1a48:	8b 8b       	std	Y+19, r24	; 0x13
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <main+0xf24>
    1a4c:	89 e1       	ldi	r24, 0x19	; 25
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9a 8b       	std	Y+18, r25	; 0x12
    1a52:	89 8b       	std	Y+17, r24	; 0x11
    1a54:	89 89       	ldd	r24, Y+17	; 0x11
    1a56:	9a 89       	ldd	r25, Y+18	; 0x12
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <main+0xf12>
    1a5c:	9a 8b       	std	Y+18, r25	; 0x12
    1a5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <main+0xf06>
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c <main+0xf56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	98 8b       	std	Y+16, r25	; 0x10
    1a8e:	8f 87       	std	Y+15, r24	; 0x0f
    1a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a92:	98 89       	ldd	r25, Y+16	; 0x10
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <main+0xf4e>
    1a98:	98 8b       	std	Y+16, r25	; 0x10
    1a9a:	8f 87       	std	Y+15, r24	; 0x0f
			 _delay_ms(DELAY_UART);

			 if (check_pw == 0)
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	eb 55       	subi	r30, 0x5B	; 91
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 23       	and	r24, r24
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <main+0xf64>
    1aa8:	7b c0       	rjmp	.+246    	; 0x1ba0 <main+0x105a>
			 {
			     LCD_clearScreen();
    1aaa:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
			     LCD_displayStringRowColumn(0,4,"INVALID");
    1aae:	2b e7       	ldi	r18, 0x7B	; 123
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	64 e0       	ldi	r22, 0x04	; 4
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	0e 94 ed 18 	call	0x31da	; 0x31da <LCD_displayStringRowColumn>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e4       	ldi	r25, 0x40	; 64
    1ac0:	ac e1       	ldi	r26, 0x1C	; 28
    1ac2:	b5 e4       	ldi	r27, 0x45	; 69
    1ac4:	8b 87       	std	Y+11, r24	; 0x0b
    1ac6:	9c 87       	std	Y+12, r25	; 0x0c
    1ac8:	ad 87       	std	Y+13, r26	; 0x0d
    1aca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	4a e7       	ldi	r20, 0x7A	; 122
    1ada:	53 e4       	ldi	r21, 0x43	; 67
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	a9 87       	std	Y+9, r26	; 0x09
    1aea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	5f e3       	ldi	r21, 0x3F	; 63
    1afc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b00:	88 23       	and	r24, r24
    1b02:	2c f4       	brge	.+10     	; 0x1b0e <main+0xfc8>
		__ticks = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	3f c0       	rjmp	.+126    	; 0x1b8c <main+0x1046>
	else if (__tmp > 65535)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	4f e7       	ldi	r20, 0x7F	; 127
    1b1c:	57 e4       	ldi	r21, 0x47	; 71
    1b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	4c f5       	brge	.+82     	; 0x1b78 <main+0x1032>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e2       	ldi	r20, 0x20	; 32
    1b34:	51 e4       	ldi	r21, 0x41	; 65
    1b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <main+0x1028>
    1b50:	89 e1       	ldi	r24, 0x19	; 25
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <main+0x1016>
    1b60:	9c 83       	std	Y+4, r25	; 0x04
    1b62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	69 f7       	brne	.-38     	; 0x1b50 <main+0x100a>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <main+0x105a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b78:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7a:	78 85       	ldd	r23, Y+8	; 0x08
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <main+0x1052>
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	89 83       	std	Y+1, r24	; 0x01
			     _delay_ms(DELAY_Keypad);
			 }

		}while(check_pw==0 && count <3); // out check here if count greater than 3 it will disable lcd for a while
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	eb 55       	subi	r30, 0x5B	; 91
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	88 23       	and	r24, r24
    1baa:	39 f4       	brne	.+14     	; 0x1bba <main+0x1074>
    1bac:	fe 01       	movw	r30, r28
    1bae:	e5 56       	subi	r30, 0x65	; 101
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	83 30       	cpi	r24, 0x03	; 3
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <main+0x1074>
    1bb8:	e0 ce       	rjmp	.-576    	; 0x197a <main+0xe34>
		if(check_pw)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	eb 55       	subi	r30, 0x5B	; 91
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <main+0x1082>
    1bc6:	42 c0       	rjmp	.+132    	; 0x1c4c <main+0x1106>
		{
			/* DOOR OPENS IN 15 SECONDS AND STAYS OPENED FOR 3 SECONDS AND STARTS
			    				 *  CLOSING AGAIN IN 15 SECONDS */

			SECONDS_T0_MC1 = 0;
    1bc8:	10 92 fd 00 	sts	0x00FD, r1
    1bcc:	10 92 fe 00 	sts	0x00FE, r1
    1bd0:	10 92 ff 00 	sts	0x00FF, r1
    1bd4:	10 92 00 01 	sts	0x0100, r1
			LCD_clearScreen(); LCD_displayString("Opening Door");
    1bd8:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
    1bdc:	8d eb       	ldi	r24, 0xBD	; 189
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
			while ( SECONDS_T0_MC1 <= 15);
    1be4:	80 91 fd 00 	lds	r24, 0x00FD
    1be8:	90 91 fe 00 	lds	r25, 0x00FE
    1bec:	a0 91 ff 00 	lds	r26, 0x00FF
    1bf0:	b0 91 00 01 	lds	r27, 0x0100
    1bf4:	80 31       	cpi	r24, 0x10	; 16
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	a1 05       	cpc	r26, r1
    1bfa:	b1 05       	cpc	r27, r1
    1bfc:	98 f3       	brcs	.-26     	; 0x1be4 <main+0x109e>
			LCD_clearScreen(); LCD_displayString("Door Open");
    1bfe:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
    1c02:	8a ec       	ldi	r24, 0xCA	; 202
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
			while ( SECONDS_T0_MC1 <= 18);
    1c0a:	80 91 fd 00 	lds	r24, 0x00FD
    1c0e:	90 91 fe 00 	lds	r25, 0x00FE
    1c12:	a0 91 ff 00 	lds	r26, 0x00FF
    1c16:	b0 91 00 01 	lds	r27, 0x0100
    1c1a:	83 31       	cpi	r24, 0x13	; 19
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	a1 05       	cpc	r26, r1
    1c20:	b1 05       	cpc	r27, r1
    1c22:	98 f3       	brcs	.-26     	; 0x1c0a <main+0x10c4>
			LCD_clearScreen(); LCD_displayString("Closing Door");
    1c24:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
    1c28:	84 ed       	ldi	r24, 0xD4	; 212
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
			while ( SECONDS_T0_MC1 <= 33);
    1c30:	80 91 fd 00 	lds	r24, 0x00FD
    1c34:	90 91 fe 00 	lds	r25, 0x00FE
    1c38:	a0 91 ff 00 	lds	r26, 0x00FF
    1c3c:	b0 91 00 01 	lds	r27, 0x0100
    1c40:	82 32       	cpi	r24, 0x22	; 34
    1c42:	91 05       	cpc	r25, r1
    1c44:	a1 05       	cpc	r26, r1
    1c46:	b1 05       	cpc	r27, r1
    1c48:	98 f3       	brcs	.-26     	; 0x1c30 <main+0x10ea>
    1c4a:	55 cb       	rjmp	.-2390   	; 0x12f6 <main+0x7b0>
		}
		// if password do not match so turn on buzzer
		else if(check_pw==0)
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	eb 55       	subi	r30, 0x5B	; 91
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	88 23       	and	r24, r24
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <main+0x1114>
    1c58:	4e cb       	rjmp	.-2404   	; 0x12f6 <main+0x7b0>
		{
		   LCD_clearScreen();
    1c5a:	0e 94 29 19 	call	0x3252	; 0x3252 <LCD_clearScreen>
		   LCD_displayStringRowColumn(0,5,"ALARM");
    1c5e:	21 ee       	ldi	r18, 0xE1	; 225
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	65 e0       	ldi	r22, 0x05	; 5
    1c66:	a9 01       	movw	r20, r18
    1c68:	0e 94 ed 18 	call	0x31da	; 0x31da <LCD_displayStringRowColumn>
		   SECONDS_T0_MC1 = 0;
    1c6c:	10 92 fd 00 	sts	0x00FD, r1
    1c70:	10 92 fe 00 	sts	0x00FE, r1
    1c74:	10 92 ff 00 	sts	0x00FF, r1
    1c78:	10 92 00 01 	sts	0x0100, r1
		   while ( SECONDS_T0_MC1 < 60);       // LOCK MC1 FOR 60 SECONDS
    1c7c:	80 91 fd 00 	lds	r24, 0x00FD
    1c80:	90 91 fe 00 	lds	r25, 0x00FE
    1c84:	a0 91 ff 00 	lds	r26, 0x00FF
    1c88:	b0 91 00 01 	lds	r27, 0x0100
    1c8c:	8c 33       	cpi	r24, 0x3C	; 60
    1c8e:	91 05       	cpc	r25, r1
    1c90:	a1 05       	cpc	r26, r1
    1c92:	b1 05       	cpc	r27, r1
    1c94:	98 f3       	brcs	.-26     	; 0x1c7c <main+0x1136>
    1c96:	2f cb       	rjmp	.-2466   	; 0x12f6 <main+0x7b0>

00001c98 <EnterPW>:
	}
	}
}

void EnterPW(uint8 PW[] )
{
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	6f 97       	sbiw	r28, 0x1f	; 31
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	9f 8f       	std	Y+31, r25	; 0x1f
    1cb2:	8e 8f       	std	Y+30, r24	; 0x1e
	LCD_moveCursor(1, 5);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	65 e0       	ldi	r22, 0x05	; 5
    1cb8:	0e 94 ab 18 	call	0x3156	; 0x3156 <LCD_moveCursor>
	for (uint8 i = 0; i < 5; i++) {
    1cbc:	1d 8e       	std	Y+29, r1	; 0x1d
    1cbe:	8b c0       	rjmp	.+278    	; 0x1dd6 <EnterPW+0x13e>
		while ((KEYPAD_getPressedKey() != 13) && (i == 4));  // POLLING UNTIL ON BUTTON PRESSED
    1cc0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <KEYPAD_getPressedKey>
    1cc4:	8d 30       	cpi	r24, 0x0D	; 13
    1cc6:	19 f0       	breq	.+6      	; 0x1cce <EnterPW+0x36>
    1cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cca:	84 30       	cpi	r24, 0x04	; 4
    1ccc:	c9 f3       	breq	.-14     	; 0x1cc0 <EnterPW+0x28>

		PW[i] = KEYPAD_getPressedKey();
    1cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cd8:	8c 01       	movw	r16, r24
    1cda:	02 0f       	add	r16, r18
    1cdc:	13 1f       	adc	r17, r19
    1cde:	0e 94 7d 13 	call	0x26fa	; 0x26fa <KEYPAD_getPressedKey>
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 83       	st	Z, r24
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e4       	ldi	r25, 0x40	; 64
    1cea:	ac e1       	ldi	r26, 0x1C	; 28
    1cec:	b5 e4       	ldi	r27, 0x45	; 69
    1cee:	89 8f       	std	Y+25, r24	; 0x19
    1cf0:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf2:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a e7       	ldi	r20, 0x7A	; 122
    1d04:	53 e4       	ldi	r21, 0x43	; 67
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8d 8b       	std	Y+21, r24	; 0x15
    1d10:	9e 8b       	std	Y+22, r25	; 0x16
    1d12:	af 8b       	std	Y+23, r26	; 0x17
    1d14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <EnterPW+0xa0>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9c 8b       	std	Y+20, r25	; 0x14
    1d34:	8b 8b       	std	Y+19, r24	; 0x13
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <EnterPW+0x11e>
	else if (__tmp > 65535)
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <EnterPW+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	69 8d       	ldd	r22, Y+25	; 0x19
    1d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9c 8b       	std	Y+20, r25	; 0x14
    1d76:	8b 8b       	std	Y+19, r24	; 0x13
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <EnterPW+0x100>
    1d7a:	89 e1       	ldi	r24, 0x19	; 25
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9a 8b       	std	Y+18, r25	; 0x12
    1d80:	89 8b       	std	Y+17, r24	; 0x11
    1d82:	89 89       	ldd	r24, Y+17	; 0x11
    1d84:	9a 89       	ldd	r25, Y+18	; 0x12
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <EnterPW+0xee>
    1d8a:	9a 8b       	std	Y+18, r25	; 0x12
    1d8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d90:	9c 89       	ldd	r25, Y+20	; 0x14
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9c 8b       	std	Y+20, r25	; 0x14
    1d96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <EnterPW+0xe2>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <EnterPW+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6d 89       	ldd	r22, Y+21	; 0x15
    1da4:	7e 89       	ldd	r23, Y+22	; 0x16
    1da6:	8f 89       	ldd	r24, Y+23	; 0x17
    1da8:	98 8d       	ldd	r25, Y+24	; 0x18
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9c 8b       	std	Y+20, r25	; 0x14
    1db4:	8b 8b       	std	Y+19, r24	; 0x13
    1db6:	8b 89       	ldd	r24, Y+19	; 0x13
    1db8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dba:	98 8b       	std	Y+16, r25	; 0x10
    1dbc:	8f 87       	std	Y+15, r24	; 0x0f
    1dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc0:	98 89       	ldd	r25, Y+16	; 0x10
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <EnterPW+0x12a>
    1dc6:	98 8b       	std	Y+16, r25	; 0x10
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(DELAY_Keypad);				//DELAY SO KEYPAD DOESN'T REPEAT
		LCD_displayCharacter('*');
    1dca:	8a e2       	ldi	r24, 0x2A	; 42
    1dcc:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_displayCharacter>
}

void EnterPW(uint8 PW[] )
{
	LCD_moveCursor(1, 5);
	for (uint8 i = 0; i < 5; i++) {
    1dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd8:	85 30       	cpi	r24, 0x05	; 5
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <EnterPW+0x146>
    1ddc:	71 cf       	rjmp	.-286    	; 0x1cc0 <EnterPW+0x28>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e4       	ldi	r25, 0x40	; 64
    1de2:	ac e1       	ldi	r26, 0x1C	; 28
    1de4:	b5 e4       	ldi	r27, 0x45	; 69
    1de6:	8b 87       	std	Y+11, r24	; 0x0b
    1de8:	9c 87       	std	Y+12, r25	; 0x0c
    1dea:	ad 87       	std	Y+13, r26	; 0x0d
    1dec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a e7       	ldi	r20, 0x7A	; 122
    1dfc:	53 e4       	ldi	r21, 0x43	; 67
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	8f 83       	std	Y+7, r24	; 0x07
    1e08:	98 87       	std	Y+8, r25	; 0x08
    1e0a:	a9 87       	std	Y+9, r26	; 0x09
    1e0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e10:	78 85       	ldd	r23, Y+8	; 0x08
    1e12:	89 85       	ldd	r24, Y+9	; 0x09
    1e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e22:	88 23       	and	r24, r24
    1e24:	2c f4       	brge	.+10     	; 0x1e30 <EnterPW+0x198>
		__ticks = 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <EnterPW+0x216>
	else if (__tmp > 65535)
    1e30:	6f 81       	ldd	r22, Y+7	; 0x07
    1e32:	78 85       	ldd	r23, Y+8	; 0x08
    1e34:	89 85       	ldd	r24, Y+9	; 0x09
    1e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	4c f5       	brge	.+82     	; 0x1e9a <EnterPW+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <EnterPW+0x1f8>
    1e72:	89 e1       	ldi	r24, 0x19	; 25
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <EnterPW+0x1e6>
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	8d 81       	ldd	r24, Y+5	; 0x05
    1e88:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	9e 83       	std	Y+6, r25	; 0x06
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f7       	brne	.-38     	; 0x1e72 <EnterPW+0x1da>
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <EnterPW+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <EnterPW+0x222>
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
		PW[i] = KEYPAD_getPressedKey();
		_delay_ms(DELAY_Keypad);				//DELAY SO KEYPAD DOESN'T REPEAT
		LCD_displayCharacter('*');
	}
	_delay_ms(DELAY_Keypad);
}
    1ec2:	6f 96       	adiw	r28, 0x1f	; 31
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	08 95       	ret

00001ed8 <SendPW_UART>:


void SendPW_UART( uint8 PW[] )
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	61 97       	sbiw	r28, 0x11	; 17
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	99 8b       	std	Y+17, r25	; 0x11
    1eee:	88 8b       	std	Y+16, r24	; 0x10
		for (uint8 i=0 ; i<4 ; i++)
    1ef0:	1f 86       	std	Y+15, r1	; 0x0f
    1ef2:	80 c0       	rjmp	.+256    	; 0x1ff4 <SendPW_UART+0x11c>
		{
			UART_sendByte( PW[i] );
    1ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	88 89       	ldd	r24, Y+16	; 0x10
    1efc:	99 89       	ldd	r25, Y+17	; 0x11
    1efe:	fc 01       	movw	r30, r24
    1f00:	e2 0f       	add	r30, r18
    1f02:	f3 1f       	adc	r31, r19
    1f04:	80 81       	ld	r24, Z
    1f06:	0e 94 9a 1a 	call	0x3534	; 0x3534 <UART_sendByte>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a2 e0       	ldi	r26, 0x02	; 2
    1f10:	b3 e4       	ldi	r27, 0x43	; 67
    1f12:	8b 87       	std	Y+11, r24	; 0x0b
    1f14:	9c 87       	std	Y+12, r25	; 0x0c
    1f16:	ad 87       	std	Y+13, r26	; 0x0d
    1f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a e7       	ldi	r20, 0x7A	; 122
    1f28:	53 e4       	ldi	r21, 0x43	; 67
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	8f 83       	std	Y+7, r24	; 0x07
    1f34:	98 87       	std	Y+8, r25	; 0x08
    1f36:	a9 87       	std	Y+9, r26	; 0x09
    1f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3c:	78 85       	ldd	r23, Y+8	; 0x08
    1f3e:	89 85       	ldd	r24, Y+9	; 0x09
    1f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	2c f4       	brge	.+10     	; 0x1f5c <SendPW_UART+0x84>
		__ticks = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
    1f5a:	3f c0       	rjmp	.+126    	; 0x1fda <SendPW_UART+0x102>
	else if (__tmp > 65535)
    1f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5e:	78 85       	ldd	r23, Y+8	; 0x08
    1f60:	89 85       	ldd	r24, Y+9	; 0x09
    1f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	57 e4       	ldi	r21, 0x47	; 71
    1f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	4c f5       	brge	.+82     	; 0x1fc6 <SendPW_UART+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e2       	ldi	r20, 0x20	; 32
    1f82:	51 e4       	ldi	r21, 0x41	; 65
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <SendPW_UART+0xe4>
    1f9e:	89 e1       	ldi	r24, 0x19	; 25
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9c 83       	std	Y+4, r25	; 0x04
    1fa4:	8b 83       	std	Y+3, r24	; 0x03
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <SendPW_UART+0xd2>
    1fae:	9c 83       	std	Y+4, r25	; 0x04
    1fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	00 97       	sbiw	r24, 0x00	; 0
    1fc2:	69 f7       	brne	.-38     	; 0x1f9e <SendPW_UART+0xc6>
    1fc4:	14 c0       	rjmp	.+40     	; 0x1fee <SendPW_UART+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc8:	78 85       	ldd	r23, Y+8	; 0x08
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9e 83       	std	Y+6, r25	; 0x06
    1fd8:	8d 83       	std	Y+5, r24	; 0x05
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fde:	9a 83       	std	Y+2, r25	; 0x02
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	f1 f7       	brne	.-4      	; 0x1fe6 <SendPW_UART+0x10e>
    1fea:	9a 83       	std	Y+2, r25	; 0x02
    1fec:	89 83       	std	Y+1, r24	; 0x01
}


void SendPW_UART( uint8 PW[] )
{
		for (uint8 i=0 ; i<4 ; i++)
    1fee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff0:	8f 5f       	subi	r24, 0xFF	; 255
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	84 30       	cpi	r24, 0x04	; 4
    1ff8:	08 f4       	brcc	.+2      	; 0x1ffc <SendPW_UART+0x124>
    1ffa:	7c cf       	rjmp	.-264    	; 0x1ef4 <SendPW_UART+0x1c>
		{
			UART_sendByte( PW[i] );
			_delay_ms(DELAY_UART);
		}

}
    1ffc:	61 96       	adiw	r28, 0x11	; 17
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <timer0_isr_fn>:
void timer0_isr_fn(void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
	timer0_tick++;
    2016:	80 91 f8 00 	lds	r24, 0x00F8
    201a:	8f 5f       	subi	r24, 0xFF	; 255
    201c:	80 93 f8 00 	sts	0x00F8, r24
	if(timer0_tick==30)
    2020:	80 91 f8 00 	lds	r24, 0x00F8
    2024:	8e 31       	cpi	r24, 0x1E	; 30
    2026:	41 f5       	brne	.+80     	; 0x2078 <timer0_isr_fn+0x6a>
	{
	SECONDS_T0_MC1 ++; SECONDS_T0_MC2 ++;
    2028:	80 91 fd 00 	lds	r24, 0x00FD
    202c:	90 91 fe 00 	lds	r25, 0x00FE
    2030:	a0 91 ff 00 	lds	r26, 0x00FF
    2034:	b0 91 00 01 	lds	r27, 0x0100
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	a1 1d       	adc	r26, r1
    203c:	b1 1d       	adc	r27, r1
    203e:	80 93 fd 00 	sts	0x00FD, r24
    2042:	90 93 fe 00 	sts	0x00FE, r25
    2046:	a0 93 ff 00 	sts	0x00FF, r26
    204a:	b0 93 00 01 	sts	0x0100, r27
    204e:	80 91 01 01 	lds	r24, 0x0101
    2052:	90 91 02 01 	lds	r25, 0x0102
    2056:	a0 91 03 01 	lds	r26, 0x0103
    205a:	b0 91 04 01 	lds	r27, 0x0104
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	a1 1d       	adc	r26, r1
    2062:	b1 1d       	adc	r27, r1
    2064:	80 93 01 01 	sts	0x0101, r24
    2068:	90 93 02 01 	sts	0x0102, r25
    206c:	a0 93 03 01 	sts	0x0103, r26
    2070:	b0 93 04 01 	sts	0x0104, r27
	timer0_tick=0;
    2074:	10 92 f8 00 	sts	0x00F8, r1
	}
}
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <GPIO_setupPinDirection+0x6>
    2084:	00 d0       	rcall	.+0      	; 0x2086 <GPIO_setupPinDirection+0x8>
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	6a 83       	std	Y+2, r22	; 0x02
    2090:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	88 30       	cpi	r24, 0x08	; 8
    2096:	08 f0       	brcs	.+2      	; 0x209a <GPIO_setupPinDirection+0x1c>
    2098:	d5 c0       	rjmp	.+426    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	84 30       	cpi	r24, 0x04	; 4
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <GPIO_setupPinDirection+0x24>
    20a0:	d1 c0       	rjmp	.+418    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	3d 83       	std	Y+5, r19	; 0x05
    20aa:	2c 83       	std	Y+4, r18	; 0x04
    20ac:	8c 81       	ldd	r24, Y+4	; 0x04
    20ae:	9d 81       	ldd	r25, Y+5	; 0x05
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	91 05       	cpc	r25, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <GPIO_setupPinDirection+0x3a>
    20b6:	43 c0       	rjmp	.+134    	; 0x213e <GPIO_setupPinDirection+0xc0>
    20b8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ba:	3d 81       	ldd	r19, Y+5	; 0x05
    20bc:	22 30       	cpi	r18, 0x02	; 2
    20be:	31 05       	cpc	r19, r1
    20c0:	2c f4       	brge	.+10     	; 0x20cc <GPIO_setupPinDirection+0x4e>
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	9d 81       	ldd	r25, Y+5	; 0x05
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	71 f0       	breq	.+28     	; 0x20e6 <GPIO_setupPinDirection+0x68>
    20ca:	bc c0       	rjmp	.+376    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
    20cc:	2c 81       	ldd	r18, Y+4	; 0x04
    20ce:	3d 81       	ldd	r19, Y+5	; 0x05
    20d0:	22 30       	cpi	r18, 0x02	; 2
    20d2:	31 05       	cpc	r19, r1
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <GPIO_setupPinDirection+0x5a>
    20d6:	5f c0       	rjmp	.+190    	; 0x2196 <GPIO_setupPinDirection+0x118>
    20d8:	8c 81       	ldd	r24, Y+4	; 0x04
    20da:	9d 81       	ldd	r25, Y+5	; 0x05
    20dc:	83 30       	cpi	r24, 0x03	; 3
    20de:	91 05       	cpc	r25, r1
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <GPIO_setupPinDirection+0x66>
    20e2:	85 c0       	rjmp	.+266    	; 0x21ee <GPIO_setupPinDirection+0x170>
    20e4:	af c0       	rjmp	.+350    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	a1 f4       	brne	.+40     	; 0x2114 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20ec:	aa e3       	ldi	r26, 0x3A	; 58
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	ea e3       	ldi	r30, 0x3A	; 58
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	48 2f       	mov	r20, r24
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 2e       	mov	r0, r18
    2104:	02 c0       	rjmp	.+4      	; 0x210a <GPIO_setupPinDirection+0x8c>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <GPIO_setupPinDirection+0x88>
    210e:	84 2b       	or	r24, r20
    2110:	8c 93       	st	X, r24
    2112:	98 c0       	rjmp	.+304    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2114:	aa e3       	ldi	r26, 0x3A	; 58
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	ea e3       	ldi	r30, 0x3A	; 58
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	48 2f       	mov	r20, r24
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	02 2e       	mov	r0, r18
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <GPIO_setupPinDirection+0xb4>
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	0a 94       	dec	r0
    2134:	e2 f7       	brpl	.-8      	; 0x212e <GPIO_setupPinDirection+0xb0>
    2136:	80 95       	com	r24
    2138:	84 23       	and	r24, r20
    213a:	8c 93       	st	X, r24
    213c:	83 c0       	rjmp	.+262    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	81 30       	cpi	r24, 0x01	; 1
    2142:	a1 f4       	brne	.+40     	; 0x216c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2144:	a7 e3       	ldi	r26, 0x37	; 55
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e7 e3       	ldi	r30, 0x37	; 55
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	48 2f       	mov	r20, r24
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	02 2e       	mov	r0, r18
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <GPIO_setupPinDirection+0xe4>
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	0a 94       	dec	r0
    2164:	e2 f7       	brpl	.-8      	; 0x215e <GPIO_setupPinDirection+0xe0>
    2166:	84 2b       	or	r24, r20
    2168:	8c 93       	st	X, r24
    216a:	6c c0       	rjmp	.+216    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    216c:	a7 e3       	ldi	r26, 0x37	; 55
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e7 e3       	ldi	r30, 0x37	; 55
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	48 2f       	mov	r20, r24
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 2e       	mov	r0, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <GPIO_setupPinDirection+0x10c>
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	0a 94       	dec	r0
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <GPIO_setupPinDirection+0x108>
    218e:	80 95       	com	r24
    2190:	84 23       	and	r24, r20
    2192:	8c 93       	st	X, r24
    2194:	57 c0       	rjmp	.+174    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	a1 f4       	brne	.+40     	; 0x21c4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    219c:	a4 e3       	ldi	r26, 0x34	; 52
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e4 e3       	ldi	r30, 0x34	; 52
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	48 2f       	mov	r20, r24
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <GPIO_setupPinDirection+0x13c>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <GPIO_setupPinDirection+0x138>
    21be:	84 2b       	or	r24, r20
    21c0:	8c 93       	st	X, r24
    21c2:	40 c0       	rjmp	.+128    	; 0x2244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21c4:	a4 e3       	ldi	r26, 0x34	; 52
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e4 e3       	ldi	r30, 0x34	; 52
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	48 2f       	mov	r20, r24
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 2e       	mov	r0, r18
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <GPIO_setupPinDirection+0x164>
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	0a 94       	dec	r0
    21e4:	e2 f7       	brpl	.-8      	; 0x21de <GPIO_setupPinDirection+0x160>
    21e6:	80 95       	com	r24
    21e8:	84 23       	and	r24, r20
    21ea:	8c 93       	st	X, r24
    21ec:	2b c0       	rjmp	.+86     	; 0x2244 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	81 30       	cpi	r24, 0x01	; 1
    21f2:	a1 f4       	brne	.+40     	; 0x221c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    21f4:	a1 e3       	ldi	r26, 0x31	; 49
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e1 e3       	ldi	r30, 0x31	; 49
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	48 2f       	mov	r20, r24
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 2e       	mov	r0, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <GPIO_setupPinDirection+0x194>
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	0a 94       	dec	r0
    2214:	e2 f7       	brpl	.-8      	; 0x220e <GPIO_setupPinDirection+0x190>
    2216:	84 2b       	or	r24, r20
    2218:	8c 93       	st	X, r24
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    221c:	a1 e3       	ldi	r26, 0x31	; 49
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e1 e3       	ldi	r30, 0x31	; 49
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <GPIO_setupPinDirection+0x1bc>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <GPIO_setupPinDirection+0x1b8>
    223e:	80 95       	com	r24
    2240:	84 23       	and	r24, r20
    2242:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	00 d0       	rcall	.+0      	; 0x225a <GPIO_writePin+0x6>
    225a:	00 d0       	rcall	.+0      	; 0x225c <GPIO_writePin+0x8>
    225c:	0f 92       	push	r0
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	6a 83       	std	Y+2, r22	; 0x02
    2266:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	88 30       	cpi	r24, 0x08	; 8
    226c:	08 f0       	brcs	.+2      	; 0x2270 <GPIO_writePin+0x1c>
    226e:	d5 c0       	rjmp	.+426    	; 0x241a <GPIO_writePin+0x1c6>
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	84 30       	cpi	r24, 0x04	; 4
    2274:	08 f0       	brcs	.+2      	; 0x2278 <GPIO_writePin+0x24>
    2276:	d1 c0       	rjmp	.+418    	; 0x241a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	3d 83       	std	Y+5, r19	; 0x05
    2280:	2c 83       	std	Y+4, r18	; 0x04
    2282:	8c 81       	ldd	r24, Y+4	; 0x04
    2284:	9d 81       	ldd	r25, Y+5	; 0x05
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	91 05       	cpc	r25, r1
    228a:	09 f4       	brne	.+2      	; 0x228e <GPIO_writePin+0x3a>
    228c:	43 c0       	rjmp	.+134    	; 0x2314 <GPIO_writePin+0xc0>
    228e:	2c 81       	ldd	r18, Y+4	; 0x04
    2290:	3d 81       	ldd	r19, Y+5	; 0x05
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	2c f4       	brge	.+10     	; 0x22a2 <GPIO_writePin+0x4e>
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	9d 81       	ldd	r25, Y+5	; 0x05
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	71 f0       	breq	.+28     	; 0x22bc <GPIO_writePin+0x68>
    22a0:	bc c0       	rjmp	.+376    	; 0x241a <GPIO_writePin+0x1c6>
    22a2:	2c 81       	ldd	r18, Y+4	; 0x04
    22a4:	3d 81       	ldd	r19, Y+5	; 0x05
    22a6:	22 30       	cpi	r18, 0x02	; 2
    22a8:	31 05       	cpc	r19, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <GPIO_writePin+0x5a>
    22ac:	5f c0       	rjmp	.+190    	; 0x236c <GPIO_writePin+0x118>
    22ae:	8c 81       	ldd	r24, Y+4	; 0x04
    22b0:	9d 81       	ldd	r25, Y+5	; 0x05
    22b2:	83 30       	cpi	r24, 0x03	; 3
    22b4:	91 05       	cpc	r25, r1
    22b6:	09 f4       	brne	.+2      	; 0x22ba <GPIO_writePin+0x66>
    22b8:	85 c0       	rjmp	.+266    	; 0x23c4 <GPIO_writePin+0x170>
    22ba:	af c0       	rjmp	.+350    	; 0x241a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	81 30       	cpi	r24, 0x01	; 1
    22c0:	a1 f4       	brne	.+40     	; 0x22ea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    22c2:	ab e3       	ldi	r26, 0x3B	; 59
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	eb e3       	ldi	r30, 0x3B	; 59
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	48 2f       	mov	r20, r24
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	02 2e       	mov	r0, r18
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <GPIO_writePin+0x8c>
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	0a 94       	dec	r0
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <GPIO_writePin+0x88>
    22e4:	84 2b       	or	r24, r20
    22e6:	8c 93       	st	X, r24
    22e8:	98 c0       	rjmp	.+304    	; 0x241a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    22ea:	ab e3       	ldi	r26, 0x3B	; 59
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	eb e3       	ldi	r30, 0x3B	; 59
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	48 2f       	mov	r20, r24
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 2e       	mov	r0, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <GPIO_writePin+0xb4>
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <GPIO_writePin+0xb0>
    230c:	80 95       	com	r24
    230e:	84 23       	and	r24, r20
    2310:	8c 93       	st	X, r24
    2312:	83 c0       	rjmp	.+262    	; 0x241a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	a1 f4       	brne	.+40     	; 0x2342 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    231a:	a8 e3       	ldi	r26, 0x38	; 56
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e8 e3       	ldi	r30, 0x38	; 56
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	02 2e       	mov	r0, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <GPIO_writePin+0xe4>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <GPIO_writePin+0xe0>
    233c:	84 2b       	or	r24, r20
    233e:	8c 93       	st	X, r24
    2340:	6c c0       	rjmp	.+216    	; 0x241a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2342:	a8 e3       	ldi	r26, 0x38	; 56
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e8 e3       	ldi	r30, 0x38	; 56
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	48 2f       	mov	r20, r24
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	02 2e       	mov	r0, r18
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <GPIO_writePin+0x10c>
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	0a 94       	dec	r0
    2362:	e2 f7       	brpl	.-8      	; 0x235c <GPIO_writePin+0x108>
    2364:	80 95       	com	r24
    2366:	84 23       	and	r24, r20
    2368:	8c 93       	st	X, r24
    236a:	57 c0       	rjmp	.+174    	; 0x241a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	a1 f4       	brne	.+40     	; 0x239a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2372:	a5 e3       	ldi	r26, 0x35	; 53
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e5 e3       	ldi	r30, 0x35	; 53
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	48 2f       	mov	r20, r24
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	02 2e       	mov	r0, r18
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <GPIO_writePin+0x13c>
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	0a 94       	dec	r0
    2392:	e2 f7       	brpl	.-8      	; 0x238c <GPIO_writePin+0x138>
    2394:	84 2b       	or	r24, r20
    2396:	8c 93       	st	X, r24
    2398:	40 c0       	rjmp	.+128    	; 0x241a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    239a:	a5 e3       	ldi	r26, 0x35	; 53
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e5 e3       	ldi	r30, 0x35	; 53
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	48 2f       	mov	r20, r24
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 2e       	mov	r0, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <GPIO_writePin+0x164>
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	0a 94       	dec	r0
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <GPIO_writePin+0x160>
    23bc:	80 95       	com	r24
    23be:	84 23       	and	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	2b c0       	rjmp	.+86     	; 0x241a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	a1 f4       	brne	.+40     	; 0x23f2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    23ca:	a2 e3       	ldi	r26, 0x32	; 50
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e2 e3       	ldi	r30, 0x32	; 50
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	48 2f       	mov	r20, r24
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 2e       	mov	r0, r18
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <GPIO_writePin+0x194>
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	0a 94       	dec	r0
    23ea:	e2 f7       	brpl	.-8      	; 0x23e4 <GPIO_writePin+0x190>
    23ec:	84 2b       	or	r24, r20
    23ee:	8c 93       	st	X, r24
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    23f2:	a2 e3       	ldi	r26, 0x32	; 50
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e2 e3       	ldi	r30, 0x32	; 50
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	48 2f       	mov	r20, r24
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	02 2e       	mov	r0, r18
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <GPIO_writePin+0x1bc>
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	0a 94       	dec	r0
    2412:	e2 f7       	brpl	.-8      	; 0x240c <GPIO_writePin+0x1b8>
    2414:	80 95       	com	r24
    2416:	84 23       	and	r24, r20
    2418:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <GPIO_readPin+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <GPIO_readPin+0x8>
    2432:	0f 92       	push	r0
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
    2438:	8a 83       	std	Y+2, r24	; 0x02
    243a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    243c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	88 30       	cpi	r24, 0x08	; 8
    2442:	08 f0       	brcs	.+2      	; 0x2446 <GPIO_readPin+0x1c>
    2444:	84 c0       	rjmp	.+264    	; 0x254e <GPIO_readPin+0x124>
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	84 30       	cpi	r24, 0x04	; 4
    244a:	08 f0       	brcs	.+2      	; 0x244e <GPIO_readPin+0x24>
    244c:	80 c0       	rjmp	.+256    	; 0x254e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	3d 83       	std	Y+5, r19	; 0x05
    2456:	2c 83       	std	Y+4, r18	; 0x04
    2458:	4c 81       	ldd	r20, Y+4	; 0x04
    245a:	5d 81       	ldd	r21, Y+5	; 0x05
    245c:	41 30       	cpi	r20, 0x01	; 1
    245e:	51 05       	cpc	r21, r1
    2460:	79 f1       	breq	.+94     	; 0x24c0 <GPIO_readPin+0x96>
    2462:	8c 81       	ldd	r24, Y+4	; 0x04
    2464:	9d 81       	ldd	r25, Y+5	; 0x05
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	91 05       	cpc	r25, r1
    246a:	34 f4       	brge	.+12     	; 0x2478 <GPIO_readPin+0x4e>
    246c:	2c 81       	ldd	r18, Y+4	; 0x04
    246e:	3d 81       	ldd	r19, Y+5	; 0x05
    2470:	21 15       	cp	r18, r1
    2472:	31 05       	cpc	r19, r1
    2474:	69 f0       	breq	.+26     	; 0x2490 <GPIO_readPin+0x66>
    2476:	6b c0       	rjmp	.+214    	; 0x254e <GPIO_readPin+0x124>
    2478:	4c 81       	ldd	r20, Y+4	; 0x04
    247a:	5d 81       	ldd	r21, Y+5	; 0x05
    247c:	42 30       	cpi	r20, 0x02	; 2
    247e:	51 05       	cpc	r21, r1
    2480:	b9 f1       	breq	.+110    	; 0x24f0 <GPIO_readPin+0xc6>
    2482:	8c 81       	ldd	r24, Y+4	; 0x04
    2484:	9d 81       	ldd	r25, Y+5	; 0x05
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	91 05       	cpc	r25, r1
    248a:	09 f4       	brne	.+2      	; 0x248e <GPIO_readPin+0x64>
    248c:	49 c0       	rjmp	.+146    	; 0x2520 <GPIO_readPin+0xf6>
    248e:	5f c0       	rjmp	.+190    	; 0x254e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2490:	e9 e3       	ldi	r30, 0x39	; 57
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a9 01       	movw	r20, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <GPIO_readPin+0x7e>
    24a4:	55 95       	asr	r21
    24a6:	47 95       	ror	r20
    24a8:	8a 95       	dec	r24
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <GPIO_readPin+0x7a>
    24ac:	ca 01       	movw	r24, r20
    24ae:	81 70       	andi	r24, 0x01	; 1
    24b0:	90 70       	andi	r25, 0x00	; 0
    24b2:	88 23       	and	r24, r24
    24b4:	19 f0       	breq	.+6      	; 0x24bc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	49 c0       	rjmp	.+146    	; 0x254e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24bc:	19 82       	std	Y+1, r1	; 0x01
    24be:	47 c0       	rjmp	.+142    	; 0x254e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    24c0:	e6 e3       	ldi	r30, 0x36	; 54
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a9 01       	movw	r20, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <GPIO_readPin+0xae>
    24d4:	55 95       	asr	r21
    24d6:	47 95       	ror	r20
    24d8:	8a 95       	dec	r24
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <GPIO_readPin+0xaa>
    24dc:	ca 01       	movw	r24, r20
    24de:	81 70       	andi	r24, 0x01	; 1
    24e0:	90 70       	andi	r25, 0x00	; 0
    24e2:	88 23       	and	r24, r24
    24e4:	19 f0       	breq	.+6      	; 0x24ec <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	31 c0       	rjmp	.+98     	; 0x254e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    24ec:	19 82       	std	Y+1, r1	; 0x01
    24ee:	2f c0       	rjmp	.+94     	; 0x254e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    24f0:	e3 e3       	ldi	r30, 0x33	; 51
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a9 01       	movw	r20, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <GPIO_readPin+0xde>
    2504:	55 95       	asr	r21
    2506:	47 95       	ror	r20
    2508:	8a 95       	dec	r24
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <GPIO_readPin+0xda>
    250c:	ca 01       	movw	r24, r20
    250e:	81 70       	andi	r24, 0x01	; 1
    2510:	90 70       	andi	r25, 0x00	; 0
    2512:	88 23       	and	r24, r24
    2514:	19 f0       	breq	.+6      	; 0x251c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	19 c0       	rjmp	.+50     	; 0x254e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    251c:	19 82       	std	Y+1, r1	; 0x01
    251e:	17 c0       	rjmp	.+46     	; 0x254e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2520:	e0 e3       	ldi	r30, 0x30	; 48
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	a9 01       	movw	r20, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <GPIO_readPin+0x10e>
    2534:	55 95       	asr	r21
    2536:	47 95       	ror	r20
    2538:	8a 95       	dec	r24
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <GPIO_readPin+0x10a>
    253c:	ca 01       	movw	r24, r20
    253e:	81 70       	andi	r24, 0x01	; 1
    2540:	90 70       	andi	r25, 0x00	; 0
    2542:	88 23       	and	r24, r24
    2544:	19 f0       	breq	.+6      	; 0x254c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	01 c0       	rjmp	.+2      	; 0x254e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    254c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    254e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	00 d0       	rcall	.+0      	; 0x2566 <GPIO_setupPortDirection+0x6>
    2566:	00 d0       	rcall	.+0      	; 0x2568 <GPIO_setupPortDirection+0x8>
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	84 30       	cpi	r24, 0x04	; 4
    2574:	90 f5       	brcc	.+100    	; 0x25da <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3c 83       	std	Y+4, r19	; 0x04
    257e:	2b 83       	std	Y+3, r18	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	d1 f0       	breq	.+52     	; 0x25be <GPIO_setupPortDirection+0x5e>
    258a:	2b 81       	ldd	r18, Y+3	; 0x03
    258c:	3c 81       	ldd	r19, Y+4	; 0x04
    258e:	22 30       	cpi	r18, 0x02	; 2
    2590:	31 05       	cpc	r19, r1
    2592:	2c f4       	brge	.+10     	; 0x259e <GPIO_setupPortDirection+0x3e>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 f0       	breq	.+24     	; 0x25b4 <GPIO_setupPortDirection+0x54>
    259c:	1e c0       	rjmp	.+60     	; 0x25da <GPIO_setupPortDirection+0x7a>
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	3c 81       	ldd	r19, Y+4	; 0x04
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	81 f0       	breq	.+32     	; 0x25c8 <GPIO_setupPortDirection+0x68>
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	91 05       	cpc	r25, r1
    25b0:	81 f0       	breq	.+32     	; 0x25d2 <GPIO_setupPortDirection+0x72>
    25b2:	13 c0       	rjmp	.+38     	; 0x25da <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    25b4:	ea e3       	ldi	r30, 0x3A	; 58
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	80 83       	st	Z, r24
    25bc:	0e c0       	rjmp	.+28     	; 0x25da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    25be:	e7 e3       	ldi	r30, 0x37	; 55
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	80 83       	st	Z, r24
    25c6:	09 c0       	rjmp	.+18     	; 0x25da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25c8:	e4 e3       	ldi	r30, 0x34	; 52
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	80 83       	st	Z, r24
    25d0:	04 c0       	rjmp	.+8      	; 0x25da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25d2:	e1 e3       	ldi	r30, 0x31	; 49
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <GPIO_writePort+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <GPIO_writePort+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	84 30       	cpi	r24, 0x04	; 4
    25fc:	90 f5       	brcc	.+100    	; 0x2662 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	3c 83       	std	Y+4, r19	; 0x04
    2606:	2b 83       	std	Y+3, r18	; 0x03
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	91 05       	cpc	r25, r1
    2610:	d1 f0       	breq	.+52     	; 0x2646 <GPIO_writePort+0x5e>
    2612:	2b 81       	ldd	r18, Y+3	; 0x03
    2614:	3c 81       	ldd	r19, Y+4	; 0x04
    2616:	22 30       	cpi	r18, 0x02	; 2
    2618:	31 05       	cpc	r19, r1
    261a:	2c f4       	brge	.+10     	; 0x2626 <GPIO_writePort+0x3e>
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	61 f0       	breq	.+24     	; 0x263c <GPIO_writePort+0x54>
    2624:	1e c0       	rjmp	.+60     	; 0x2662 <GPIO_writePort+0x7a>
    2626:	2b 81       	ldd	r18, Y+3	; 0x03
    2628:	3c 81       	ldd	r19, Y+4	; 0x04
    262a:	22 30       	cpi	r18, 0x02	; 2
    262c:	31 05       	cpc	r19, r1
    262e:	81 f0       	breq	.+32     	; 0x2650 <GPIO_writePort+0x68>
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	83 30       	cpi	r24, 0x03	; 3
    2636:	91 05       	cpc	r25, r1
    2638:	81 f0       	breq	.+32     	; 0x265a <GPIO_writePort+0x72>
    263a:	13 c0       	rjmp	.+38     	; 0x2662 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    263c:	eb e3       	ldi	r30, 0x3B	; 59
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	80 83       	st	Z, r24
    2644:	0e c0       	rjmp	.+28     	; 0x2662 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2646:	e8 e3       	ldi	r30, 0x38	; 56
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	80 83       	st	Z, r24
    264e:	09 c0       	rjmp	.+18     	; 0x2662 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2650:	e5 e3       	ldi	r30, 0x35	; 53
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	80 83       	st	Z, r24
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    265a:	e2 e3       	ldi	r30, 0x32	; 50
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	80 83       	st	Z, r24
			break;
		}
	}
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	00 d0       	rcall	.+0      	; 0x2676 <GPIO_readPort+0x6>
    2676:	00 d0       	rcall	.+0      	; 0x2678 <GPIO_readPort+0x8>
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    267e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	90 f5       	brcc	.+100    	; 0x26ea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	3c 83       	std	Y+4, r19	; 0x04
    268e:	2b 83       	std	Y+3, r18	; 0x03
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	91 05       	cpc	r25, r1
    2698:	d1 f0       	breq	.+52     	; 0x26ce <GPIO_readPort+0x5e>
    269a:	2b 81       	ldd	r18, Y+3	; 0x03
    269c:	3c 81       	ldd	r19, Y+4	; 0x04
    269e:	22 30       	cpi	r18, 0x02	; 2
    26a0:	31 05       	cpc	r19, r1
    26a2:	2c f4       	brge	.+10     	; 0x26ae <GPIO_readPort+0x3e>
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	61 f0       	breq	.+24     	; 0x26c4 <GPIO_readPort+0x54>
    26ac:	1e c0       	rjmp	.+60     	; 0x26ea <GPIO_readPort+0x7a>
    26ae:	2b 81       	ldd	r18, Y+3	; 0x03
    26b0:	3c 81       	ldd	r19, Y+4	; 0x04
    26b2:	22 30       	cpi	r18, 0x02	; 2
    26b4:	31 05       	cpc	r19, r1
    26b6:	81 f0       	breq	.+32     	; 0x26d8 <GPIO_readPort+0x68>
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	9c 81       	ldd	r25, Y+4	; 0x04
    26bc:	83 30       	cpi	r24, 0x03	; 3
    26be:	91 05       	cpc	r25, r1
    26c0:	81 f0       	breq	.+32     	; 0x26e2 <GPIO_readPort+0x72>
    26c2:	13 c0       	rjmp	.+38     	; 0x26ea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    26c4:	e9 e3       	ldi	r30, 0x39	; 57
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	0e c0       	rjmp	.+28     	; 0x26ea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    26ce:	e6 e3       	ldi	r30, 0x36	; 54
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	09 c0       	rjmp	.+18     	; 0x26ea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    26d8:	e3 e3       	ldi	r30, 0x33	; 51
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    26e2:	e0 e3       	ldi	r30, 0x30	; 48
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <KEYPAD_getPressedKey+0x6>
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2706:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2708:	1b 82       	std	Y+3, r1	; 0x03
    270a:	43 c0       	rjmp	.+134    	; 0x2792 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	60 e0       	ldi	r22, 0x00	; 0
    2710:	0e 94 b0 12 	call	0x2560	; 0x2560 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	98 2f       	mov	r25, r24
    2718:	9c 5f       	subi	r25, 0xFC	; 252
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	69 2f       	mov	r22, r25
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	0e 94 3f 10 	call	0x207e	; 0x207e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	88 2f       	mov	r24, r24
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 01       	movw	r18, r24
    272c:	2c 5f       	subi	r18, 0xFC	; 252
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	02 c0       	rjmp	.+4      	; 0x273a <KEYPAD_getPressedKey+0x40>
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	2a 95       	dec	r18
    273c:	e2 f7       	brpl	.-8      	; 0x2736 <KEYPAD_getPressedKey+0x3c>
    273e:	80 95       	com	r24
    2740:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	69 81       	ldd	r22, Y+1	; 0x01
    2746:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    274a:	1a 82       	std	Y+2, r1	; 0x02
    274c:	1c c0       	rjmp	.+56     	; 0x2786 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	6a 81       	ldd	r22, Y+2	; 0x02
    2752:	0e 94 15 12 	call	0x242a	; 0x242a <GPIO_readPin>
    2756:	88 23       	and	r24, r24
    2758:	99 f4       	brne	.+38     	; 0x2780 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	98 2f       	mov	r25, r24
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	89 0f       	add	r24, r25
    276e:	8f 5f       	subi	r24, 0xFF	; 255
    2770:	0e 94 ce 13 	call	0x279c	; 0x279c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	8a 83       	std	Y+2, r24	; 0x02
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	84 30       	cpi	r24, 0x04	; 4
    278a:	08 f3       	brcs	.-62     	; 0x274e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	8f 5f       	subi	r24, 0xFF	; 255
    2790:	8b 83       	std	Y+3, r24	; 0x03
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	08 f4       	brcc	.+2      	; 0x279a <KEYPAD_getPressedKey+0xa0>
    2798:	b9 cf       	rjmp	.-142    	; 0x270c <KEYPAD_getPressedKey+0x12>
    279a:	b6 cf       	rjmp	.-148    	; 0x2708 <KEYPAD_getPressedKey+0xe>

0000279c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    27aa:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	3c 83       	std	Y+4, r19	; 0x04
    27b4:	2b 83       	std	Y+3, r18	; 0x03
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	88 30       	cpi	r24, 0x08	; 8
    27bc:	91 05       	cpc	r25, r1
    27be:	09 f4       	brne	.+2      	; 0x27c2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    27c0:	70 c0       	rjmp	.+224    	; 0x28a2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    27c2:	2b 81       	ldd	r18, Y+3	; 0x03
    27c4:	3c 81       	ldd	r19, Y+4	; 0x04
    27c6:	29 30       	cpi	r18, 0x09	; 9
    27c8:	31 05       	cpc	r19, r1
    27ca:	5c f5       	brge	.+86     	; 0x2822 <KEYPAD_4x4_adjustKeyNumber+0x86>
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	84 30       	cpi	r24, 0x04	; 4
    27d2:	91 05       	cpc	r25, r1
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    27d6:	59 c0       	rjmp	.+178    	; 0x288a <KEYPAD_4x4_adjustKeyNumber+0xee>
    27d8:	2b 81       	ldd	r18, Y+3	; 0x03
    27da:	3c 81       	ldd	r19, Y+4	; 0x04
    27dc:	25 30       	cpi	r18, 0x05	; 5
    27de:	31 05       	cpc	r19, r1
    27e0:	9c f4       	brge	.+38     	; 0x2808 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	82 30       	cpi	r24, 0x02	; 2
    27e8:	91 05       	cpc	r25, r1
    27ea:	09 f4       	brne	.+2      	; 0x27ee <KEYPAD_4x4_adjustKeyNumber+0x52>
    27ec:	48 c0       	rjmp	.+144    	; 0x287e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    27ee:	2b 81       	ldd	r18, Y+3	; 0x03
    27f0:	3c 81       	ldd	r19, Y+4	; 0x04
    27f2:	23 30       	cpi	r18, 0x03	; 3
    27f4:	31 05       	cpc	r19, r1
    27f6:	0c f0       	brlt	.+2      	; 0x27fa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    27f8:	45 c0       	rjmp	.+138    	; 0x2884 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	81 30       	cpi	r24, 0x01	; 1
    2800:	91 05       	cpc	r25, r1
    2802:	09 f4       	brne	.+2      	; 0x2806 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2804:	39 c0       	rjmp	.+114    	; 0x2878 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2806:	67 c0       	rjmp	.+206    	; 0x28d6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2808:	2b 81       	ldd	r18, Y+3	; 0x03
    280a:	3c 81       	ldd	r19, Y+4	; 0x04
    280c:	26 30       	cpi	r18, 0x06	; 6
    280e:	31 05       	cpc	r19, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2812:	41 c0       	rjmp	.+130    	; 0x2896 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	87 30       	cpi	r24, 0x07	; 7
    281a:	91 05       	cpc	r25, r1
    281c:	0c f0       	brlt	.+2      	; 0x2820 <KEYPAD_4x4_adjustKeyNumber+0x84>
    281e:	3e c0       	rjmp	.+124    	; 0x289c <KEYPAD_4x4_adjustKeyNumber+0x100>
    2820:	37 c0       	rjmp	.+110    	; 0x2890 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2822:	2b 81       	ldd	r18, Y+3	; 0x03
    2824:	3c 81       	ldd	r19, Y+4	; 0x04
    2826:	2c 30       	cpi	r18, 0x0C	; 12
    2828:	31 05       	cpc	r19, r1
    282a:	09 f4       	brne	.+2      	; 0x282e <KEYPAD_4x4_adjustKeyNumber+0x92>
    282c:	46 c0       	rjmp	.+140    	; 0x28ba <KEYPAD_4x4_adjustKeyNumber+0x11e>
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	9c 81       	ldd	r25, Y+4	; 0x04
    2832:	8d 30       	cpi	r24, 0x0D	; 13
    2834:	91 05       	cpc	r25, r1
    2836:	5c f4       	brge	.+22     	; 0x284e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2838:	2b 81       	ldd	r18, Y+3	; 0x03
    283a:	3c 81       	ldd	r19, Y+4	; 0x04
    283c:	2a 30       	cpi	r18, 0x0A	; 10
    283e:	31 05       	cpc	r19, r1
    2840:	b1 f1       	breq	.+108    	; 0x28ae <KEYPAD_4x4_adjustKeyNumber+0x112>
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	9c 81       	ldd	r25, Y+4	; 0x04
    2846:	8b 30       	cpi	r24, 0x0B	; 11
    2848:	91 05       	cpc	r25, r1
    284a:	a4 f5       	brge	.+104    	; 0x28b4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    284c:	2d c0       	rjmp	.+90     	; 0x28a8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    284e:	2b 81       	ldd	r18, Y+3	; 0x03
    2850:	3c 81       	ldd	r19, Y+4	; 0x04
    2852:	2e 30       	cpi	r18, 0x0E	; 14
    2854:	31 05       	cpc	r19, r1
    2856:	b9 f1       	breq	.+110    	; 0x28c6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	8e 30       	cpi	r24, 0x0E	; 14
    285e:	91 05       	cpc	r25, r1
    2860:	7c f1       	brlt	.+94     	; 0x28c0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2862:	2b 81       	ldd	r18, Y+3	; 0x03
    2864:	3c 81       	ldd	r19, Y+4	; 0x04
    2866:	2f 30       	cpi	r18, 0x0F	; 15
    2868:	31 05       	cpc	r19, r1
    286a:	79 f1       	breq	.+94     	; 0x28ca <KEYPAD_4x4_adjustKeyNumber+0x12e>
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	9c 81       	ldd	r25, Y+4	; 0x04
    2870:	80 31       	cpi	r24, 0x10	; 16
    2872:	91 05       	cpc	r25, r1
    2874:	69 f1       	breq	.+90     	; 0x28d0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2876:	2f c0       	rjmp	.+94     	; 0x28d6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2878:	87 e0       	ldi	r24, 0x07	; 7
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	2e c0       	rjmp	.+92     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    287e:	88 e0       	ldi	r24, 0x08	; 8
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	2b c0       	rjmp	.+86     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2884:	89 e0       	ldi	r24, 0x09	; 9
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	28 c0       	rjmp	.+80     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    288a:	85 e2       	ldi	r24, 0x25	; 37
    288c:	89 83       	std	Y+1, r24	; 0x01
    288e:	25 c0       	rjmp	.+74     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2890:	84 e0       	ldi	r24, 0x04	; 4
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	22 c0       	rjmp	.+68     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2896:	85 e0       	ldi	r24, 0x05	; 5
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	1f c0       	rjmp	.+62     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    289c:	86 e0       	ldi	r24, 0x06	; 6
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	1c c0       	rjmp	.+56     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    28a2:	8a e2       	ldi	r24, 0x2A	; 42
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	19 c0       	rjmp	.+50     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	16 c0       	rjmp	.+44     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	13 c0       	rjmp	.+38     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    28b4:	83 e0       	ldi	r24, 0x03	; 3
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	10 c0       	rjmp	.+32     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    28ba:	8d e2       	ldi	r24, 0x2D	; 45
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	0d c0       	rjmp	.+26     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    28c0:	8d e0       	ldi	r24, 0x0D	; 13
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	0a c0       	rjmp	.+20     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    28c6:	19 82       	std	Y+1, r1	; 0x01
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    28ca:	8d e3       	ldi	r24, 0x3D	; 61
    28cc:	89 83       	std	Y+1, r24	; 0x01
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    28d0:	8b e2       	ldi	r24, 0x2B	; 43
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    28da:	89 81       	ldd	r24, Y+1	; 0x01
} 
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	64 e0       	ldi	r22, 0x04	; 4
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 3f 10 	call	0x207e	; 0x207e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	65 e0       	ldi	r22, 0x05	; 5
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	0e 94 3f 10 	call	0x207e	; 0x207e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	66 e0       	ldi	r22, 0x06	; 6
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	0e 94 3f 10 	call	0x207e	; 0x207e <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	6f ef       	ldi	r22, 0xFF	; 255
    2914:	0e 94 b0 12 	call	0x2560	; 0x2560 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2918:	88 e3       	ldi	r24, 0x38	; 56
    291a:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    291e:	8c e0       	ldi	r24, 0x0C	; 12
    2920:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_sendCommand>
}
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	ea 97       	sbiw	r28, 0x3a	; 58
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2946:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	64 e0       	ldi	r22, 0x04	; 4
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	65 e0       	ldi	r22, 0x05	; 5
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e8       	ldi	r26, 0x80	; 128
    2962:	bf e3       	ldi	r27, 0x3F	; 63
    2964:	8d ab       	std	Y+53, r24	; 0x35
    2966:	9e ab       	std	Y+54, r25	; 0x36
    2968:	af ab       	std	Y+55, r26	; 0x37
    296a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	6d a9       	ldd	r22, Y+53	; 0x35
    296e:	7e a9       	ldd	r23, Y+54	; 0x36
    2970:	8f a9       	ldd	r24, Y+55	; 0x37
    2972:	98 ad       	ldd	r25, Y+56	; 0x38
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a e7       	ldi	r20, 0x7A	; 122
    297a:	53 e4       	ldi	r21, 0x43	; 67
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	89 ab       	std	Y+49, r24	; 0x31
    2986:	9a ab       	std	Y+50, r25	; 0x32
    2988:	ab ab       	std	Y+51, r26	; 0x33
    298a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    298c:	69 a9       	ldd	r22, Y+49	; 0x31
    298e:	7a a9       	ldd	r23, Y+50	; 0x32
    2990:	8b a9       	ldd	r24, Y+51	; 0x33
    2992:	9c a9       	ldd	r25, Y+52	; 0x34
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e8       	ldi	r20, 0x80	; 128
    299a:	5f e3       	ldi	r21, 0x3F	; 63
    299c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a0:	88 23       	and	r24, r24
    29a2:	2c f4       	brge	.+10     	; 0x29ae <LCD_sendCommand+0x7e>
		__ticks = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	98 ab       	std	Y+48, r25	; 0x30
    29aa:	8f a7       	std	Y+47, r24	; 0x2f
    29ac:	3f c0       	rjmp	.+126    	; 0x2a2c <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    29ae:	69 a9       	ldd	r22, Y+49	; 0x31
    29b0:	7a a9       	ldd	r23, Y+50	; 0x32
    29b2:	8b a9       	ldd	r24, Y+51	; 0x33
    29b4:	9c a9       	ldd	r25, Y+52	; 0x34
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	3f ef       	ldi	r19, 0xFF	; 255
    29ba:	4f e7       	ldi	r20, 0x7F	; 127
    29bc:	57 e4       	ldi	r21, 0x47	; 71
    29be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c2:	18 16       	cp	r1, r24
    29c4:	4c f5       	brge	.+82     	; 0x2a18 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	6d a9       	ldd	r22, Y+53	; 0x35
    29c8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ca:	8f a9       	ldd	r24, Y+55	; 0x37
    29cc:	98 ad       	ldd	r25, Y+56	; 0x38
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e2       	ldi	r20, 0x20	; 32
    29d4:	51 e4       	ldi	r21, 0x41	; 65
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	98 ab       	std	Y+48, r25	; 0x30
    29ec:	8f a7       	std	Y+47, r24	; 0x2f
    29ee:	0f c0       	rjmp	.+30     	; 0x2a0e <LCD_sendCommand+0xde>
    29f0:	89 e1       	ldi	r24, 0x19	; 25
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9e a7       	std	Y+46, r25	; 0x2e
    29f6:	8d a7       	std	Y+45, r24	; 0x2d
    29f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_sendCommand+0xcc>
    2a00:	9e a7       	std	Y+46, r25	; 0x2e
    2a02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a06:	98 a9       	ldd	r25, Y+48	; 0x30
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	98 ab       	std	Y+48, r25	; 0x30
    2a0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a10:	98 a9       	ldd	r25, Y+48	; 0x30
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	69 f7       	brne	.-38     	; 0x29f0 <LCD_sendCommand+0xc0>
    2a16:	14 c0       	rjmp	.+40     	; 0x2a40 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a18:	69 a9       	ldd	r22, Y+49	; 0x31
    2a1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	98 ab       	std	Y+48, r25	; 0x30
    2a2a:	8f a7       	std	Y+47, r24	; 0x2f
    2a2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a30:	9c a7       	std	Y+44, r25	; 0x2c
    2a32:	8b a7       	std	Y+43, r24	; 0x2b
    2a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_sendCommand+0x108>
    2a3c:	9c a7       	std	Y+44, r25	; 0x2c
    2a3e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a40:	83 e0       	ldi	r24, 0x03	; 3
    2a42:	66 e0       	ldi	r22, 0x06	; 6
    2a44:	41 e0       	ldi	r20, 0x01	; 1
    2a46:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a0 e8       	ldi	r26, 0x80	; 128
    2a50:	bf e3       	ldi	r27, 0x3F	; 63
    2a52:	8f a3       	std	Y+39, r24	; 0x27
    2a54:	98 a7       	std	Y+40, r25	; 0x28
    2a56:	a9 a7       	std	Y+41, r26	; 0x29
    2a58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a e7       	ldi	r20, 0x7A	; 122
    2a68:	53 e4       	ldi	r21, 0x43	; 67
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8b a3       	std	Y+35, r24	; 0x23
    2a74:	9c a3       	std	Y+36, r25	; 0x24
    2a76:	ad a3       	std	Y+37, r26	; 0x25
    2a78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a80:	9e a1       	ldd	r25, Y+38	; 0x26
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <LCD_sendCommand+0x16c>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9a a3       	std	Y+34, r25	; 0x22
    2a98:	89 a3       	std	Y+33, r24	; 0x21
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ab6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ab8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9a a3       	std	Y+34, r25	; 0x22
    2ada:	89 a3       	std	Y+33, r24	; 0x21
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <LCD_sendCommand+0x1cc>
    2ade:	89 e1       	ldi	r24, 0x19	; 25
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	98 a3       	std	Y+32, r25	; 0x20
    2ae4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ae6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae8:	98 a1       	ldd	r25, Y+32	; 0x20
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_sendCommand+0x1ba>
    2aee:	98 a3       	std	Y+32, r25	; 0x20
    2af0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	89 a1       	ldd	r24, Y+33	; 0x21
    2af4:	9a a1       	ldd	r25, Y+34	; 0x22
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9a a3       	std	Y+34, r25	; 0x22
    2afa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	89 a1       	ldd	r24, Y+33	; 0x21
    2afe:	9a a1       	ldd	r25, Y+34	; 0x22
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <LCD_sendCommand+0x1ae>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	6b a1       	ldd	r22, Y+35	; 0x23
    2b08:	7c a1       	ldd	r23, Y+36	; 0x24
    2b0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9a a3       	std	Y+34, r25	; 0x22
    2b18:	89 a3       	std	Y+33, r24	; 0x21
    2b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b20:	8d 8f       	std	Y+29, r24	; 0x1d
    2b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_sendCommand+0x1f6>
    2b2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b2c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2b2e:	82 e0       	ldi	r24, 0x02	; 2
    2b30:	6a ad       	ldd	r22, Y+58	; 0x3a
    2b32:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <GPIO_writePort>
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 e8       	ldi	r26, 0x80	; 128
    2b3c:	bf e3       	ldi	r27, 0x3F	; 63
    2b3e:	89 8f       	std	Y+25, r24	; 0x19
    2b40:	9a 8f       	std	Y+26, r25	; 0x1a
    2b42:	ab 8f       	std	Y+27, r26	; 0x1b
    2b44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	69 8d       	ldd	r22, Y+25	; 0x19
    2b48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a e7       	ldi	r20, 0x7A	; 122
    2b54:	53 e4       	ldi	r21, 0x43	; 67
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8d 8b       	std	Y+21, r24	; 0x15
    2b60:	9e 8b       	std	Y+22, r25	; 0x16
    2b62:	af 8b       	std	Y+23, r26	; 0x17
    2b64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b66:	6d 89       	ldd	r22, Y+21	; 0x15
    2b68:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <LCD_sendCommand+0x258>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9c 8b       	std	Y+20, r25	; 0x14
    2b84:	8b 8b       	std	Y+19, r24	; 0x13
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2b88:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9c 8b       	std	Y+20, r25	; 0x14
    2bc6:	8b 8b       	std	Y+19, r24	; 0x13
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <LCD_sendCommand+0x2b8>
    2bca:	89 e1       	ldi	r24, 0x19	; 25
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9a 8b       	std	Y+18, r25	; 0x12
    2bd0:	89 8b       	std	Y+17, r24	; 0x11
    2bd2:	89 89       	ldd	r24, Y+17	; 0x11
    2bd4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <LCD_sendCommand+0x2a6>
    2bda:	9a 8b       	std	Y+18, r25	; 0x12
    2bdc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	8b 89       	ldd	r24, Y+19	; 0x13
    2be0:	9c 89       	ldd	r25, Y+20	; 0x14
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9c 8b       	std	Y+20, r25	; 0x14
    2be6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bea:	9c 89       	ldd	r25, Y+20	; 0x14
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <LCD_sendCommand+0x29a>
    2bf0:	14 c0       	rjmp	.+40     	; 0x2c1a <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9c 8b       	std	Y+20, r25	; 0x14
    2c04:	8b 8b       	std	Y+19, r24	; 0x13
    2c06:	8b 89       	ldd	r24, Y+19	; 0x13
    2c08:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0a:	98 8b       	std	Y+16, r25	; 0x10
    2c0c:	8f 87       	std	Y+15, r24	; 0x0f
    2c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c10:	98 89       	ldd	r25, Y+16	; 0x10
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <LCD_sendCommand+0x2e2>
    2c16:	98 8b       	std	Y+16, r25	; 0x10
    2c18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c1a:	83 e0       	ldi	r24, 0x03	; 3
    2c1c:	66 e0       	ldi	r22, 0x06	; 6
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a0 e8       	ldi	r26, 0x80	; 128
    2c2a:	bf e3       	ldi	r27, 0x3F	; 63
    2c2c:	8b 87       	std	Y+11, r24	; 0x0b
    2c2e:	9c 87       	std	Y+12, r25	; 0x0c
    2c30:	ad 87       	std	Y+13, r26	; 0x0d
    2c32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a e7       	ldi	r20, 0x7A	; 122
    2c42:	53 e4       	ldi	r21, 0x43	; 67
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	8f 83       	std	Y+7, r24	; 0x07
    2c4e:	98 87       	std	Y+8, r25	; 0x08
    2c50:	a9 87       	std	Y+9, r26	; 0x09
    2c52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c54:	6f 81       	ldd	r22, Y+7	; 0x07
    2c56:	78 85       	ldd	r23, Y+8	; 0x08
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <LCD_sendCommand+0x346>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9e 83       	std	Y+6, r25	; 0x06
    2c72:	8d 83       	std	Y+5, r24	; 0x05
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	9e 83       	std	Y+6, r25	; 0x06
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <LCD_sendCommand+0x3a6>
    2cb8:	89 e1       	ldi	r24, 0x19	; 25
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9c 83       	std	Y+4, r25	; 0x04
    2cbe:	8b 83       	std	Y+3, r24	; 0x03
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <LCD_sendCommand+0x394>
    2cc8:	9c 83       	std	Y+4, r25	; 0x04
    2cca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <LCD_sendCommand+0x388>
    2cde:	14 c0       	rjmp	.+40     	; 0x2d08 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce2:	78 85       	ldd	r23, Y+8	; 0x08
    2ce4:	89 85       	ldd	r24, Y+9	; 0x09
    2ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9e 83       	std	Y+6, r25	; 0x06
    2cf2:	8d 83       	std	Y+5, r24	; 0x05
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	9a 83       	std	Y+2, r25	; 0x02
    2cfa:	89 83       	std	Y+1, r24	; 0x01
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_sendCommand+0x3d0>
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d08:	ea 96       	adiw	r28, 0x3a	; 58
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	ea 97       	sbiw	r28, 0x3a	; 58
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2d30:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	64 e0       	ldi	r22, 0x04	; 4
    2d36:	41 e0       	ldi	r20, 0x01	; 1
    2d38:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	65 e0       	ldi	r22, 0x05	; 5
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	a0 e8       	ldi	r26, 0x80	; 128
    2d4c:	bf e3       	ldi	r27, 0x3F	; 63
    2d4e:	8d ab       	std	Y+53, r24	; 0x35
    2d50:	9e ab       	std	Y+54, r25	; 0x36
    2d52:	af ab       	std	Y+55, r26	; 0x37
    2d54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d56:	6d a9       	ldd	r22, Y+53	; 0x35
    2d58:	7e a9       	ldd	r23, Y+54	; 0x36
    2d5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2d5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	4a e7       	ldi	r20, 0x7A	; 122
    2d64:	53 e4       	ldi	r21, 0x43	; 67
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	89 ab       	std	Y+49, r24	; 0x31
    2d70:	9a ab       	std	Y+50, r25	; 0x32
    2d72:	ab ab       	std	Y+51, r26	; 0x33
    2d74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d76:	69 a9       	ldd	r22, Y+49	; 0x31
    2d78:	7a a9       	ldd	r23, Y+50	; 0x32
    2d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8a:	88 23       	and	r24, r24
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	98 ab       	std	Y+48, r25	; 0x30
    2d94:	8f a7       	std	Y+47, r24	; 0x2f
    2d96:	3f c0       	rjmp	.+126    	; 0x2e16 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2d98:	69 a9       	ldd	r22, Y+49	; 0x31
    2d9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	3f ef       	ldi	r19, 0xFF	; 255
    2da4:	4f e7       	ldi	r20, 0x7F	; 127
    2da6:	57 e4       	ldi	r21, 0x47	; 71
    2da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dac:	18 16       	cp	r1, r24
    2dae:	4c f5       	brge	.+82     	; 0x2e02 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db0:	6d a9       	ldd	r22, Y+53	; 0x35
    2db2:	7e a9       	ldd	r23, Y+54	; 0x36
    2db4:	8f a9       	ldd	r24, Y+55	; 0x37
    2db6:	98 ad       	ldd	r25, Y+56	; 0x38
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e2       	ldi	r20, 0x20	; 32
    2dbe:	51 e4       	ldi	r21, 0x41	; 65
    2dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	98 ab       	std	Y+48, r25	; 0x30
    2dd6:	8f a7       	std	Y+47, r24	; 0x2f
    2dd8:	0f c0       	rjmp	.+30     	; 0x2df8 <LCD_displayCharacter+0xde>
    2dda:	89 e1       	ldi	r24, 0x19	; 25
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9e a7       	std	Y+46, r25	; 0x2e
    2de0:	8d a7       	std	Y+45, r24	; 0x2d
    2de2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2de4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCD_displayCharacter+0xcc>
    2dea:	9e a7       	std	Y+46, r25	; 0x2e
    2dec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df0:	98 a9       	ldd	r25, Y+48	; 0x30
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	98 ab       	std	Y+48, r25	; 0x30
    2df6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dfa:	98 a9       	ldd	r25, Y+48	; 0x30
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	69 f7       	brne	.-38     	; 0x2dda <LCD_displayCharacter+0xc0>
    2e00:	14 c0       	rjmp	.+40     	; 0x2e2a <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e02:	69 a9       	ldd	r22, Y+49	; 0x31
    2e04:	7a a9       	ldd	r23, Y+50	; 0x32
    2e06:	8b a9       	ldd	r24, Y+51	; 0x33
    2e08:	9c a9       	ldd	r25, Y+52	; 0x34
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	98 ab       	std	Y+48, r25	; 0x30
    2e14:	8f a7       	std	Y+47, r24	; 0x2f
    2e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e18:	98 a9       	ldd	r25, Y+48	; 0x30
    2e1a:	9c a7       	std	Y+44, r25	; 0x2c
    2e1c:	8b a7       	std	Y+43, r24	; 0x2b
    2e1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e20:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <LCD_displayCharacter+0x108>
    2e26:	9c a7       	std	Y+44, r25	; 0x2c
    2e28:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e2a:	83 e0       	ldi	r24, 0x03	; 3
    2e2c:	66 e0       	ldi	r22, 0x06	; 6
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	a0 e8       	ldi	r26, 0x80	; 128
    2e3a:	bf e3       	ldi	r27, 0x3F	; 63
    2e3c:	8f a3       	std	Y+39, r24	; 0x27
    2e3e:	98 a7       	std	Y+40, r25	; 0x28
    2e40:	a9 a7       	std	Y+41, r26	; 0x29
    2e42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e44:	6f a1       	ldd	r22, Y+39	; 0x27
    2e46:	78 a5       	ldd	r23, Y+40	; 0x28
    2e48:	89 a5       	ldd	r24, Y+41	; 0x29
    2e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	4a e7       	ldi	r20, 0x7A	; 122
    2e52:	53 e4       	ldi	r21, 0x43	; 67
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8b a3       	std	Y+35, r24	; 0x23
    2e5e:	9c a3       	std	Y+36, r25	; 0x24
    2e60:	ad a3       	std	Y+37, r26	; 0x25
    2e62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e64:	6b a1       	ldd	r22, Y+35	; 0x23
    2e66:	7c a1       	ldd	r23, Y+36	; 0x24
    2e68:	8d a1       	ldd	r24, Y+37	; 0x25
    2e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	2c f4       	brge	.+10     	; 0x2e86 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9a a3       	std	Y+34, r25	; 0x22
    2e82:	89 a3       	std	Y+33, r24	; 0x21
    2e84:	3f c0       	rjmp	.+126    	; 0x2f04 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2e86:	6b a1       	ldd	r22, Y+35	; 0x23
    2e88:	7c a1       	ldd	r23, Y+36	; 0x24
    2e8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	4f e7       	ldi	r20, 0x7F	; 127
    2e94:	57 e4       	ldi	r21, 0x47	; 71
    2e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9a:	18 16       	cp	r1, r24
    2e9c:	4c f5       	brge	.+82     	; 0x2ef0 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ea2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e2       	ldi	r20, 0x20	; 32
    2eac:	51 e4       	ldi	r21, 0x41	; 65
    2eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9a a3       	std	Y+34, r25	; 0x22
    2ec4:	89 a3       	std	Y+33, r24	; 0x21
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <LCD_displayCharacter+0x1cc>
    2ec8:	89 e1       	ldi	r24, 0x19	; 25
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	98 a3       	std	Y+32, r25	; 0x20
    2ece:	8f 8f       	std	Y+31, r24	; 0x1f
    2ed0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ed2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <LCD_displayCharacter+0x1ba>
    2ed8:	98 a3       	std	Y+32, r25	; 0x20
    2eda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2edc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ede:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	9a a3       	std	Y+34, r25	; 0x22
    2ee4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eea:	00 97       	sbiw	r24, 0x00	; 0
    2eec:	69 f7       	brne	.-38     	; 0x2ec8 <LCD_displayCharacter+0x1ae>
    2eee:	14 c0       	rjmp	.+40     	; 0x2f18 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	9a a3       	std	Y+34, r25	; 0x22
    2f02:	89 a3       	std	Y+33, r24	; 0x21
    2f04:	89 a1       	ldd	r24, Y+33	; 0x21
    2f06:	9a a1       	ldd	r25, Y+34	; 0x22
    2f08:	9e 8f       	std	Y+30, r25	; 0x1e
    2f0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <LCD_displayCharacter+0x1f6>
    2f14:	9e 8f       	std	Y+30, r25	; 0x1e
    2f16:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2f18:	82 e0       	ldi	r24, 0x02	; 2
    2f1a:	6a ad       	ldd	r22, Y+58	; 0x3a
    2f1c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <GPIO_writePort>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	a0 e8       	ldi	r26, 0x80	; 128
    2f26:	bf e3       	ldi	r27, 0x3F	; 63
    2f28:	89 8f       	std	Y+25, r24	; 0x19
    2f2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2f2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f30:	69 8d       	ldd	r22, Y+25	; 0x19
    2f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	4a e7       	ldi	r20, 0x7A	; 122
    2f3e:	53 e4       	ldi	r21, 0x43	; 67
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	8d 8b       	std	Y+21, r24	; 0x15
    2f4a:	9e 8b       	std	Y+22, r25	; 0x16
    2f4c:	af 8b       	std	Y+23, r26	; 0x17
    2f4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f50:	6d 89       	ldd	r22, Y+21	; 0x15
    2f52:	7e 89       	ldd	r23, Y+22	; 0x16
    2f54:	8f 89       	ldd	r24, Y+23	; 0x17
    2f56:	98 8d       	ldd	r25, Y+24	; 0x18
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e8       	ldi	r20, 0x80	; 128
    2f5e:	5f e3       	ldi	r21, 0x3F	; 63
    2f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f64:	88 23       	and	r24, r24
    2f66:	2c f4       	brge	.+10     	; 0x2f72 <LCD_displayCharacter+0x258>
		__ticks = 1;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	9c 8b       	std	Y+20, r25	; 0x14
    2f6e:	8b 8b       	std	Y+19, r24	; 0x13
    2f70:	3f c0       	rjmp	.+126    	; 0x2ff0 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2f72:	6d 89       	ldd	r22, Y+21	; 0x15
    2f74:	7e 89       	ldd	r23, Y+22	; 0x16
    2f76:	8f 89       	ldd	r24, Y+23	; 0x17
    2f78:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	3f ef       	ldi	r19, 0xFF	; 255
    2f7e:	4f e7       	ldi	r20, 0x7F	; 127
    2f80:	57 e4       	ldi	r21, 0x47	; 71
    2f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f86:	18 16       	cp	r1, r24
    2f88:	4c f5       	brge	.+82     	; 0x2fdc <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e2       	ldi	r20, 0x20	; 32
    2f98:	51 e4       	ldi	r21, 0x41	; 65
    2f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	cd 01       	movw	r24, r26
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9c 8b       	std	Y+20, r25	; 0x14
    2fb0:	8b 8b       	std	Y+19, r24	; 0x13
    2fb2:	0f c0       	rjmp	.+30     	; 0x2fd2 <LCD_displayCharacter+0x2b8>
    2fb4:	89 e1       	ldi	r24, 0x19	; 25
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	9a 8b       	std	Y+18, r25	; 0x12
    2fba:	89 8b       	std	Y+17, r24	; 0x11
    2fbc:	89 89       	ldd	r24, Y+17	; 0x11
    2fbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <LCD_displayCharacter+0x2a6>
    2fc4:	9a 8b       	std	Y+18, r25	; 0x12
    2fc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2fca:	9c 89       	ldd	r25, Y+20	; 0x14
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	9c 8b       	std	Y+20, r25	; 0x14
    2fd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	69 f7       	brne	.-38     	; 0x2fb4 <LCD_displayCharacter+0x29a>
    2fda:	14 c0       	rjmp	.+40     	; 0x3004 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fde:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	9c 8b       	std	Y+20, r25	; 0x14
    2fee:	8b 8b       	std	Y+19, r24	; 0x13
    2ff0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff4:	98 8b       	std	Y+16, r25	; 0x10
    2ff6:	8f 87       	std	Y+15, r24	; 0x0f
    2ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffa:	98 89       	ldd	r25, Y+16	; 0x10
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <LCD_displayCharacter+0x2e2>
    3000:	98 8b       	std	Y+16, r25	; 0x10
    3002:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	66 e0       	ldi	r22, 0x06	; 6
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 2a 11 	call	0x2254	; 0x2254 <GPIO_writePin>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a0 e8       	ldi	r26, 0x80	; 128
    3014:	bf e3       	ldi	r27, 0x3F	; 63
    3016:	8b 87       	std	Y+11, r24	; 0x0b
    3018:	9c 87       	std	Y+12, r25	; 0x0c
    301a:	ad 87       	std	Y+13, r26	; 0x0d
    301c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3020:	7c 85       	ldd	r23, Y+12	; 0x0c
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a e7       	ldi	r20, 0x7A	; 122
    302c:	53 e4       	ldi	r21, 0x43	; 67
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	8f 83       	std	Y+7, r24	; 0x07
    3038:	98 87       	std	Y+8, r25	; 0x08
    303a:	a9 87       	std	Y+9, r26	; 0x09
    303c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303e:	6f 81       	ldd	r22, Y+7	; 0x07
    3040:	78 85       	ldd	r23, Y+8	; 0x08
    3042:	89 85       	ldd	r24, Y+9	; 0x09
    3044:	9a 85       	ldd	r25, Y+10	; 0x0a
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <LCD_displayCharacter+0x346>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	3f c0       	rjmp	.+126    	; 0x30de <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    3060:	6f 81       	ldd	r22, Y+7	; 0x07
    3062:	78 85       	ldd	r23, Y+8	; 0x08
    3064:	89 85       	ldd	r24, Y+9	; 0x09
    3066:	9a 85       	ldd	r25, Y+10	; 0x0a
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	6b 85       	ldd	r22, Y+11	; 0x0b
    307a:	7c 85       	ldd	r23, Y+12	; 0x0c
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <LCD_displayCharacter+0x3a6>
    30a2:	89 e1       	ldi	r24, 0x19	; 25
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_displayCharacter+0x394>
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <LCD_displayCharacter+0x388>
    30c8:	14 c0       	rjmp	.+40     	; 0x30f2 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_displayCharacter+0x3d0>
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    30f2:	ea 96       	adiw	r28, 0x3a	; 58
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	00 d0       	rcall	.+0      	; 0x310a <LCD_displayString+0x6>
    310a:	0f 92       	push	r0
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	9b 83       	std	Y+3, r25	; 0x03
    3112:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3114:	19 82       	std	Y+1, r1	; 0x01
    3116:	0e c0       	rjmp	.+28     	; 0x3134 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	9b 81       	ldd	r25, Y+3	; 0x03
    3122:	fc 01       	movw	r30, r24
    3124:	e2 0f       	add	r30, r18
    3126:	f3 1f       	adc	r31, r19
    3128:	80 81       	ld	r24, Z
    312a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_displayCharacter>
		i++;
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	8f 5f       	subi	r24, 0xFF	; 255
    3132:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	9b 81       	ldd	r25, Y+3	; 0x03
    313e:	fc 01       	movw	r30, r24
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	80 81       	ld	r24, Z
    3146:	88 23       	and	r24, r24
    3148:	39 f7       	brne	.-50     	; 0x3118 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	cf 91       	pop	r28
    3152:	df 91       	pop	r29
    3154:	08 95       	ret

00003156 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3156:	df 93       	push	r29
    3158:	cf 93       	push	r28
    315a:	00 d0       	rcall	.+0      	; 0x315c <LCD_moveCursor+0x6>
    315c:	00 d0       	rcall	.+0      	; 0x315e <LCD_moveCursor+0x8>
    315e:	0f 92       	push	r0
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	8a 83       	std	Y+2, r24	; 0x02
    3166:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	28 2f       	mov	r18, r24
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	3d 83       	std	Y+5, r19	; 0x05
    3170:	2c 83       	std	Y+4, r18	; 0x04
    3172:	8c 81       	ldd	r24, Y+4	; 0x04
    3174:	9d 81       	ldd	r25, Y+5	; 0x05
    3176:	81 30       	cpi	r24, 0x01	; 1
    3178:	91 05       	cpc	r25, r1
    317a:	c1 f0       	breq	.+48     	; 0x31ac <LCD_moveCursor+0x56>
    317c:	2c 81       	ldd	r18, Y+4	; 0x04
    317e:	3d 81       	ldd	r19, Y+5	; 0x05
    3180:	22 30       	cpi	r18, 0x02	; 2
    3182:	31 05       	cpc	r19, r1
    3184:	2c f4       	brge	.+10     	; 0x3190 <LCD_moveCursor+0x3a>
    3186:	8c 81       	ldd	r24, Y+4	; 0x04
    3188:	9d 81       	ldd	r25, Y+5	; 0x05
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	61 f0       	breq	.+24     	; 0x31a6 <LCD_moveCursor+0x50>
    318e:	19 c0       	rjmp	.+50     	; 0x31c2 <LCD_moveCursor+0x6c>
    3190:	2c 81       	ldd	r18, Y+4	; 0x04
    3192:	3d 81       	ldd	r19, Y+5	; 0x05
    3194:	22 30       	cpi	r18, 0x02	; 2
    3196:	31 05       	cpc	r19, r1
    3198:	69 f0       	breq	.+26     	; 0x31b4 <LCD_moveCursor+0x5e>
    319a:	8c 81       	ldd	r24, Y+4	; 0x04
    319c:	9d 81       	ldd	r25, Y+5	; 0x05
    319e:	83 30       	cpi	r24, 0x03	; 3
    31a0:	91 05       	cpc	r25, r1
    31a2:	61 f0       	breq	.+24     	; 0x31bc <LCD_moveCursor+0x66>
    31a4:	0e c0       	rjmp	.+28     	; 0x31c2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	0b c0       	rjmp	.+22     	; 0x31c2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	80 5c       	subi	r24, 0xC0	; 192
    31b0:	89 83       	std	Y+1, r24	; 0x01
    31b2:	07 c0       	rjmp	.+14     	; 0x31c2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	80 5f       	subi	r24, 0xF0	; 240
    31b8:	89 83       	std	Y+1, r24	; 0x01
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	80 5b       	subi	r24, 0xB0	; 176
    31c0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	80 68       	ori	r24, 0x80	; 128
    31c6:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_sendCommand>
}
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <LCD_displayStringRowColumn+0x6>
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <LCD_displayStringRowColumn+0x8>
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	6a 83       	std	Y+2, r22	; 0x02
    31ea:	5c 83       	std	Y+4, r21	; 0x04
    31ec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	6a 81       	ldd	r22, Y+2	; 0x02
    31f2:	0e 94 ab 18 	call	0x3156	; 0x3156 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	9c 81       	ldd	r25, Y+4	; 0x04
    31fa:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
}
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	62 97       	sbiw	r28, 0x12	; 18
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	9a 8b       	std	Y+18, r25	; 0x12
    3222:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3224:	89 89       	ldd	r24, Y+17	; 0x11
    3226:	9a 89       	ldd	r25, Y+18	; 0x12
    3228:	9e 01       	movw	r18, r28
    322a:	2f 5f       	subi	r18, 0xFF	; 255
    322c:	3f 4f       	sbci	r19, 0xFF	; 255
    322e:	b9 01       	movw	r22, r18
    3230:	4a e0       	ldi	r20, 0x0A	; 10
    3232:	50 e0       	ldi	r21, 0x00	; 0
    3234:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <itoa>
   LCD_displayString(buff); /* Display the string */
    3238:	ce 01       	movw	r24, r28
    323a:	01 96       	adiw	r24, 0x01	; 1
    323c:	0e 94 82 18 	call	0x3104	; 0x3104 <LCD_displayString>
}
    3240:	62 96       	adiw	r28, 0x12	; 18
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	0e 94 98 14 	call	0x2930	; 0x2930 <LCD_sendCommand>
}
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <__vector_9>:
/*ISR (TIMER0_OVF_vect)   { 	   SECONDS_T0_MC1 ++; SECONDS_T0_MC2 ++;    }

ISR (TIMER0_COMP_vect)  {		SECONDS_T0_MC1 ++; SECONDS_T0_MC2 ++;	  }
*/
ISR(TIMER0_OVF_vect)
{
    3266:	1f 92       	push	r1
    3268:	0f 92       	push	r0
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	0f 92       	push	r0
    326e:	11 24       	eor	r1, r1
    3270:	2f 93       	push	r18
    3272:	3f 93       	push	r19
    3274:	4f 93       	push	r20
    3276:	5f 93       	push	r21
    3278:	6f 93       	push	r22
    327a:	7f 93       	push	r23
    327c:	8f 93       	push	r24
    327e:	9f 93       	push	r25
    3280:	af 93       	push	r26
    3282:	bf 93       	push	r27
    3284:	ef 93       	push	r30
    3286:	ff 93       	push	r31
    3288:	df 93       	push	r29
    328a:	cf 93       	push	r28
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
	//TCNT0 = g_initial_value ;



	if(g_callBackPtr != NULL_PTR)
    3290:	80 91 05 01 	lds	r24, 0x0105
    3294:	90 91 06 01 	lds	r25, 0x0106
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	29 f0       	breq	.+10     	; 0x32a6 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    329c:	e0 91 05 01 	lds	r30, 0x0105
    32a0:	f0 91 06 01 	lds	r31, 0x0106
    32a4:	09 95       	icall
	}

}
    32a6:	cf 91       	pop	r28
    32a8:	df 91       	pop	r29
    32aa:	ff 91       	pop	r31
    32ac:	ef 91       	pop	r30
    32ae:	bf 91       	pop	r27
    32b0:	af 91       	pop	r26
    32b2:	9f 91       	pop	r25
    32b4:	8f 91       	pop	r24
    32b6:	7f 91       	pop	r23
    32b8:	6f 91       	pop	r22
    32ba:	5f 91       	pop	r21
    32bc:	4f 91       	pop	r20
    32be:	3f 91       	pop	r19
    32c0:	2f 91       	pop	r18
    32c2:	0f 90       	pop	r0
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	0f 90       	pop	r0
    32c8:	1f 90       	pop	r1
    32ca:	18 95       	reti

000032cc <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    32cc:	1f 92       	push	r1
    32ce:	0f 92       	push	r0
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	0f 92       	push	r0
    32d4:	11 24       	eor	r1, r1
    32d6:	2f 93       	push	r18
    32d8:	3f 93       	push	r19
    32da:	4f 93       	push	r20
    32dc:	5f 93       	push	r21
    32de:	6f 93       	push	r22
    32e0:	7f 93       	push	r23
    32e2:	8f 93       	push	r24
    32e4:	9f 93       	push	r25
    32e6:	af 93       	push	r26
    32e8:	bf 93       	push	r27
    32ea:	ef 93       	push	r30
    32ec:	ff 93       	push	r31
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    32f6:	80 91 05 01 	lds	r24, 0x0105
    32fa:	90 91 06 01 	lds	r25, 0x0106
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	29 f0       	breq	.+10     	; 0x330c <__vector_19+0x40>
	{
		(*g_callBackPtr)();
    3302:	e0 91 05 01 	lds	r30, 0x0105
    3306:	f0 91 06 01 	lds	r31, 0x0106
    330a:	09 95       	icall
	}
}
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	ff 91       	pop	r31
    3312:	ef 91       	pop	r30
    3314:	bf 91       	pop	r27
    3316:	af 91       	pop	r26
    3318:	9f 91       	pop	r25
    331a:	8f 91       	pop	r24
    331c:	7f 91       	pop	r23
    331e:	6f 91       	pop	r22
    3320:	5f 91       	pop	r21
    3322:	4f 91       	pop	r20
    3324:	3f 91       	pop	r19
    3326:	2f 91       	pop	r18
    3328:	0f 90       	pop	r0
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	0f 90       	pop	r0
    332e:	1f 90       	pop	r1
    3330:	18 95       	reti

00003332 <Timer0_init>:

/*******************************************************************************
 *                       Function Definition                           *
 *******************************************************************************/
void Timer0_init(const TimerConfig  *configuration){
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	00 d0       	rcall	.+0      	; 0x3338 <Timer0_init+0x6>
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	9a 83       	std	Y+2, r25	; 0x02
    333e:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = ((TCCR0 & ~0x07) | configuration->clock);  //ADJUSTS PRESCALAR BITS
    3340:	a3 e5       	ldi	r26, 0x53	; 83
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e3 e5       	ldi	r30, 0x53	; 83
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	98 2f       	mov	r25, r24
    334c:	98 7f       	andi	r25, 0xF8	; 248
    334e:	e9 81       	ldd	r30, Y+1	; 0x01
    3350:	fa 81       	ldd	r31, Y+2	; 0x02
    3352:	81 81       	ldd	r24, Z+1	; 0x01
    3354:	89 2b       	or	r24, r25
    3356:	8c 93       	st	X, r24
	TCCR0 = ((TCCR0 & ~0xC8) | configuration->mode);  //ADJUSTS MODE (FOC0,WGM00,WGM01 bits)
    3358:	a3 e5       	ldi	r26, 0x53	; 83
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e3 e5       	ldi	r30, 0x53	; 83
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	98 2f       	mov	r25, r24
    3364:	97 73       	andi	r25, 0x37	; 55
    3366:	e9 81       	ldd	r30, Y+1	; 0x01
    3368:	fa 81       	ldd	r31, Y+2	; 0x02
    336a:	80 81       	ld	r24, Z
    336c:	89 2b       	or	r24, r25
    336e:	8c 93       	st	X, r24
	TCNT0 = configuration->initial_value; // initial value for counting
    3370:	a2 e5       	ldi	r26, 0x52	; 82
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	e9 81       	ldd	r30, Y+1	; 0x01
    3376:	fa 81       	ldd	r31, Y+2	; 0x02
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	8c 93       	st	X, r24

	if (configuration->mode == NORMAL)
    337e:	e9 81       	ldd	r30, Y+1	; 0x01
    3380:	fa 81       	ldd	r31, Y+2	; 0x02
    3382:	80 81       	ld	r24, Z
    3384:	80 38       	cpi	r24, 0x80	; 128
    3386:	39 f4       	brne	.+14     	; 0x3396 <Timer0_init+0x64>
		{
			TIMSK|=(1<<TOIE0);							//TIMER OVERFLOW INTERRUPT ENABLE
    3388:	a9 e5       	ldi	r26, 0x59	; 89
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	e9 e5       	ldi	r30, 0x59	; 89
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	81 60       	ori	r24, 0x01	; 1
    3394:	8c 93       	st	X, r24
		}

		if (configuration->mode == CTC)
    3396:	e9 81       	ldd	r30, Y+1	; 0x01
    3398:	fa 81       	ldd	r31, Y+2	; 0x02
    339a:	80 81       	ld	r24, Z
    339c:	88 38       	cpi	r24, 0x88	; 136
    339e:	71 f4       	brne	.+28     	; 0x33bc <Timer0_init+0x8a>
		{
			TIMSK|=(1<<OCIE0);
    33a0:	a9 e5       	ldi	r26, 0x59	; 89
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	e9 e5       	ldi	r30, 0x59	; 89
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	82 60       	ori	r24, 0x02	; 2
    33ac:	8c 93       	st	X, r24
			OCR0= configuration->compare_value;        //SET COMPARE VALUE
    33ae:	ac e5       	ldi	r26, 0x5C	; 92
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	e9 81       	ldd	r30, Y+1	; 0x01
    33b4:	fa 81       	ldd	r31, Y+2	; 0x02
    33b6:	84 81       	ldd	r24, Z+4	; 0x04
    33b8:	95 81       	ldd	r25, Z+5	; 0x05
    33ba:	8c 93       	st	X, r24
		}
}
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <Timer0_deinit>:
void Timer0_deinit(){
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0; TCNT0=0; TIMSK &=~(1<<TOIE0) & ~(1<<OCIE0);
    33ce:	e3 e5       	ldi	r30, 0x53	; 83
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	10 82       	st	Z, r1
    33d4:	e2 e5       	ldi	r30, 0x52	; 82
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	10 82       	st	Z, r1
    33da:	a9 e5       	ldi	r26, 0x59	; 89
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e9 e5       	ldi	r30, 0x59	; 89
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	8c 7f       	andi	r24, 0xFC	; 252
    33e6:	8c 93       	st	X, r24

}
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	08 95       	ret

000033ee <Timer0_stop>:
void Timer0_stop(){
    33ee:	df 93       	push	r29
    33f0:	cf 93       	push	r28
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (TCCR0 & ~0x07);
    33f6:	a3 e5       	ldi	r26, 0x53	; 83
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e3 e5       	ldi	r30, 0x53	; 83
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	88 7f       	andi	r24, 0xF8	; 248
    3402:	8c 93       	st	X, r24
}
    3404:	cf 91       	pop	r28
    3406:	df 91       	pop	r29
    3408:	08 95       	ret

0000340a <Timer0_setCallBack>:
void Timer0_setCallBack(void(*a_ptr)(void))
{
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	00 d0       	rcall	.+0      	; 0x3410 <Timer0_setCallBack+0x6>
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	9a 83       	std	Y+2, r25	; 0x02
    3416:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	9a 81       	ldd	r25, Y+2	; 0x02
    341c:	90 93 06 01 	sts	0x0106, r25
    3420:	80 93 05 01 	sts	0x0105, r24
}
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <UART_init>:

#define BAUD_PRESCALE_U2X (((F_CPU / (USART_BAUDRATE * 8UL))) - 1)      // 8 -> DOUBLE SPEED ASYNCHRONOUS
#define BAUD_PRESCALE_SYNCH (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)  // 16 -> ASYNCHRONOUS

void UART_init( UART_Config *config )
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	00 d0       	rcall	.+0      	; 0x3434 <UART_init+0x6>
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	9a 83       	std	Y+2, r25	; 0x02
    343a:	89 83       	std	Y+1, r24	; 0x01
	/*  UCSRB REGISTER
	 *  RXC,TXC,UDR INTERRUPT ENABLE = 0,  T/R DATA BIT 8 = 0
	 */

	UCSRB|= (1<<RXEN) | (1<<TXEN) ;    // TRANSMITER ENABLE AND RECIEVER ENABLE
    343c:	aa e2       	ldi	r26, 0x2A	; 42
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	ea e2       	ldi	r30, 0x2A	; 42
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	80 81       	ld	r24, Z
    3446:	88 61       	ori	r24, 0x18	; 24
    3448:	8c 93       	st	X, r24
	/* UCSRC REGISTER
	 * USBS=0 -> 1 STOP BIT
	 * UPM0 =0 ,UPM1=1 -> EVEN PARITY BIT
	 */

	UCSRC|= (1<<URSEL); // SELECTING UCSRC BY SETTING 1 TO 'URSEL'
    344a:	a0 e4       	ldi	r26, 0x40	; 64
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	e0 e4       	ldi	r30, 0x40	; 64
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	80 68       	ori	r24, 0x80	; 128
    3456:	8c 93       	st	X, r24
	UCSRC|= (1<<UCSZ0) | (1<<UCSZ1);   //CHARCTER SIZE 8 BITS IN FRAME TRANSFERED
    3458:	a0 e4       	ldi	r26, 0x40	; 64
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e0 e4       	ldi	r30, 0x40	; 64
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	86 60       	ori	r24, 0x06	; 6
    3464:	8c 93       	st	X, r24

	UCSRC|= ( (config->ParityBits) << 4); //CHOOSE PARITY BITS
    3466:	a0 e4       	ldi	r26, 0x40	; 64
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e0 e4       	ldi	r30, 0x40	; 64
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	28 2f       	mov	r18, r24
    3472:	e9 81       	ldd	r30, Y+1	; 0x01
    3474:	fa 81       	ldd	r31, Y+2	; 0x02
    3476:	81 81       	ldd	r24, Z+1	; 0x01
    3478:	88 2f       	mov	r24, r24
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	82 95       	swap	r24
    347e:	92 95       	swap	r25
    3480:	90 7f       	andi	r25, 0xF0	; 240
    3482:	98 27       	eor	r25, r24
    3484:	80 7f       	andi	r24, 0xF0	; 240
    3486:	98 27       	eor	r25, r24
    3488:	82 2b       	or	r24, r18
    348a:	8c 93       	st	X, r24



		if (config->mode) //1 IF SYNCH
    348c:	e9 81       	ldd	r30, Y+1	; 0x01
    348e:	fa 81       	ldd	r31, Y+2	; 0x02
    3490:	80 81       	ld	r24, Z
    3492:	88 23       	and	r24, r24
    3494:	29 f1       	breq	.+74     	; 0x34e0 <UART_init+0xb2>
		{
			UCSRC |= ((config->mode) << 6);  // SYNCHRONOUS OPERATION
    3496:	a0 e4       	ldi	r26, 0x40	; 64
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e0 e4       	ldi	r30, 0x40	; 64
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	28 2f       	mov	r18, r24
    34a2:	e9 81       	ldd	r30, Y+1	; 0x01
    34a4:	fa 81       	ldd	r31, Y+2	; 0x02
    34a6:	80 81       	ld	r24, Z
    34a8:	88 2f       	mov	r24, r24
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	00 24       	eor	r0, r0
    34ae:	96 95       	lsr	r25
    34b0:	87 95       	ror	r24
    34b2:	07 94       	ror	r0
    34b4:	96 95       	lsr	r25
    34b6:	87 95       	ror	r24
    34b8:	07 94       	ror	r0
    34ba:	98 2f       	mov	r25, r24
    34bc:	80 2d       	mov	r24, r0
    34be:	82 2b       	or	r24, r18
    34c0:	8c 93       	st	X, r24

			UCSRC |= (1<<UCPOL); // DATA TRANSMITTED ON FALLING EDGE , AND SAMPLED ON POSITIVE EDGE
    34c2:	a0 e4       	ldi	r26, 0x40	; 64
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e0 e4       	ldi	r30, 0x40	; 64
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	81 60       	ori	r24, 0x01	; 1
    34ce:	8c 93       	st	X, r24

			UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    34d0:	e0 e4       	ldi	r30, 0x40	; 64
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_SYNCH;
    34d6:	e9 e2       	ldi	r30, 0x29	; 41
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	85 e0       	ldi	r24, 0x05	; 5
    34dc:	80 83       	st	Z, r24
    34de:	25 c0       	rjmp	.+74     	; 0x352a <UART_init+0xfc>
		}

		else
		{							/* UMSEL =0 -> ASYNCHRONOUS OPERATION
		 	 	 	 	 	 	 	 * U2X =1 DOUBLE TRANSMISSION SPEED FOR ASYNCHRONOUS */
			UCSRC &= ~((config->mode) << 6);
    34e0:	a0 e4       	ldi	r26, 0x40	; 64
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e0 e4       	ldi	r30, 0x40	; 64
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	28 2f       	mov	r18, r24
    34ec:	e9 81       	ldd	r30, Y+1	; 0x01
    34ee:	fa 81       	ldd	r31, Y+2	; 0x02
    34f0:	80 81       	ld	r24, Z
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	00 24       	eor	r0, r0
    34f8:	96 95       	lsr	r25
    34fa:	87 95       	ror	r24
    34fc:	07 94       	ror	r0
    34fe:	96 95       	lsr	r25
    3500:	87 95       	ror	r24
    3502:	07 94       	ror	r0
    3504:	98 2f       	mov	r25, r24
    3506:	80 2d       	mov	r24, r0
    3508:	80 95       	com	r24
    350a:	82 23       	and	r24, r18
    350c:	8c 93       	st	X, r24
			UCSRA |= (1<<U2X);
    350e:	ab e2       	ldi	r26, 0x2B	; 43
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	eb e2       	ldi	r30, 0x2B	; 43
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	82 60       	ori	r24, 0x02	; 2
    351a:	8c 93       	st	X, r24
			UBRRH = (BAUD_PRESCALE_U2X>>8);
    351c:	e0 e4       	ldi	r30, 0x40	; 64
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	10 82       	st	Z, r1
			UBRRL =  BAUD_PRESCALE_U2X;
    3522:	e9 e2       	ldi	r30, 0x29	; 41
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	8c e0       	ldi	r24, 0x0C	; 12
    3528:	80 83       	st	Z, r24
		}
}
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	0f 92       	push	r0
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    3540:	eb e2       	ldi	r30, 0x2B	; 43
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	88 2f       	mov	r24, r24
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	80 72       	andi	r24, 0x20	; 32
    354c:	90 70       	andi	r25, 0x00	; 0
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	b9 f3       	breq	.-18     	; 0x3540 <UART_sendByte+0xc>
	UDR=data;
    3552:	ec e2       	ldi	r30, 0x2C	; 44
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	80 83       	st	Z, r24
}
    355a:	0f 90       	pop	r0
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	08 95       	ret

00003562 <UART_receiveByte>:

uint8 UART_receiveByte()
{
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    356a:	eb e2       	ldi	r30, 0x2B	; 43
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
    3570:	88 23       	and	r24, r24
    3572:	dc f7       	brge	.-10     	; 0x356a <UART_receiveByte+0x8>
	return UDR;
    3574:	ec e2       	ldi	r30, 0x2C	; 44
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
}
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <UART_sendString>:

void UART_sendString(const char *str)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <UART_sendString+0x6>
    3586:	0f 92       	push	r0
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	9b 83       	std	Y+3, r25	; 0x03
    358e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3590:	19 82       	std	Y+1, r1	; 0x01
    3592:	0e c0       	rjmp	.+28     	; 0x35b0 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	9b 81       	ldd	r25, Y+3	; 0x03
    359e:	fc 01       	movw	r30, r24
    35a0:	e2 0f       	add	r30, r18
    35a2:	f3 1f       	adc	r31, r19
    35a4:	80 81       	ld	r24, Z
    35a6:	0e 94 9a 1a 	call	0x3534	; 0x3534 <UART_sendByte>
		i++;
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	8f 5f       	subi	r24, 0xFF	; 255
    35ae:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	28 2f       	mov	r18, r24
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	8a 81       	ldd	r24, Y+2	; 0x02
    35b8:	9b 81       	ldd	r25, Y+3	; 0x03
    35ba:	fc 01       	movw	r30, r24
    35bc:	e2 0f       	add	r30, r18
    35be:	f3 1f       	adc	r31, r19
    35c0:	80 81       	ld	r24, Z
    35c2:	88 23       	and	r24, r24
    35c4:	39 f7       	brne	.-50     	; 0x3594 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}

}
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	cf 91       	pop	r28
    35ce:	df 91       	pop	r29
    35d0:	08 95       	ret

000035d2 <UART_receiveString>:

void UART_receiveString(char *str)
{
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	df 93       	push	r29
    35d8:	cf 93       	push	r28
    35da:	00 d0       	rcall	.+0      	; 0x35dc <UART_receiveString+0xa>
    35dc:	0f 92       	push	r0
    35de:	cd b7       	in	r28, 0x3d	; 61
    35e0:	de b7       	in	r29, 0x3e	; 62
    35e2:	9b 83       	std	Y+3, r25	; 0x03
    35e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35e6:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_receiveByte();
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	9b 81       	ldd	r25, Y+3	; 0x03
    35f2:	8c 01       	movw	r16, r24
    35f4:	02 0f       	add	r16, r18
    35f6:	13 1f       	adc	r17, r19
    35f8:	0e 94 b1 1a 	call	0x3562	; 0x3562 <UART_receiveByte>
    35fc:	f8 01       	movw	r30, r16
    35fe:	80 83       	st	Z, r24
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <UART_receiveString+0x4e>
	while(str[i] != '#')   // keep receiving until #
	{
		i++;
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	8f 5f       	subi	r24, 0xFF	; 255
    3606:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	8c 01       	movw	r16, r24
    3614:	02 0f       	add	r16, r18
    3616:	13 1f       	adc	r17, r19
    3618:	0e 94 b1 1a 	call	0x3562	; 0x3562 <UART_receiveByte>
    361c:	f8 01       	movw	r30, r16
    361e:	80 83       	st	Z, r24

void UART_receiveString(char *str)
{
	uint8 i = 0;
	str[i] = UART_receiveByte();
	while(str[i] != '#')   // keep receiving until #
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	8a 81       	ldd	r24, Y+2	; 0x02
    3628:	9b 81       	ldd	r25, Y+3	; 0x03
    362a:	fc 01       	movw	r30, r24
    362c:	e2 0f       	add	r30, r18
    362e:	f3 1f       	adc	r31, r19
    3630:	80 81       	ld	r24, Z
    3632:	83 32       	cpi	r24, 0x23	; 35
    3634:	31 f7       	brne	.-52     	; 0x3602 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}
	str[i] = '\0';
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	9b 81       	ldd	r25, Y+3	; 0x03
    3640:	fc 01       	movw	r30, r24
    3642:	e2 0f       	add	r30, r18
    3644:	f3 1f       	adc	r31, r19
    3646:	10 82       	st	Z, r1
}
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	cf 91       	pop	r28
    3650:	df 91       	pop	r29
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	08 95       	ret

00003658 <__prologue_saves__>:
    3658:	2f 92       	push	r2
    365a:	3f 92       	push	r3
    365c:	4f 92       	push	r4
    365e:	5f 92       	push	r5
    3660:	6f 92       	push	r6
    3662:	7f 92       	push	r7
    3664:	8f 92       	push	r8
    3666:	9f 92       	push	r9
    3668:	af 92       	push	r10
    366a:	bf 92       	push	r11
    366c:	cf 92       	push	r12
    366e:	df 92       	push	r13
    3670:	ef 92       	push	r14
    3672:	ff 92       	push	r15
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
    3680:	ca 1b       	sub	r28, r26
    3682:	db 0b       	sbc	r29, r27
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	09 94       	ijmp

00003690 <__epilogue_restores__>:
    3690:	2a 88       	ldd	r2, Y+18	; 0x12
    3692:	39 88       	ldd	r3, Y+17	; 0x11
    3694:	48 88       	ldd	r4, Y+16	; 0x10
    3696:	5f 84       	ldd	r5, Y+15	; 0x0f
    3698:	6e 84       	ldd	r6, Y+14	; 0x0e
    369a:	7d 84       	ldd	r7, Y+13	; 0x0d
    369c:	8c 84       	ldd	r8, Y+12	; 0x0c
    369e:	9b 84       	ldd	r9, Y+11	; 0x0b
    36a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    36a2:	b9 84       	ldd	r11, Y+9	; 0x09
    36a4:	c8 84       	ldd	r12, Y+8	; 0x08
    36a6:	df 80       	ldd	r13, Y+7	; 0x07
    36a8:	ee 80       	ldd	r14, Y+6	; 0x06
    36aa:	fd 80       	ldd	r15, Y+5	; 0x05
    36ac:	0c 81       	ldd	r16, Y+4	; 0x04
    36ae:	1b 81       	ldd	r17, Y+3	; 0x03
    36b0:	aa 81       	ldd	r26, Y+2	; 0x02
    36b2:	b9 81       	ldd	r27, Y+1	; 0x01
    36b4:	ce 0f       	add	r28, r30
    36b6:	d1 1d       	adc	r29, r1
    36b8:	0f b6       	in	r0, 0x3f	; 63
    36ba:	f8 94       	cli
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	cd bf       	out	0x3d, r28	; 61
    36c2:	ed 01       	movw	r28, r26
    36c4:	08 95       	ret

000036c6 <itoa>:
    36c6:	fb 01       	movw	r30, r22
    36c8:	9f 01       	movw	r18, r30
    36ca:	e8 94       	clt
    36cc:	42 30       	cpi	r20, 0x02	; 2
    36ce:	c4 f0       	brlt	.+48     	; 0x3700 <itoa+0x3a>
    36d0:	45 32       	cpi	r20, 0x25	; 37
    36d2:	b4 f4       	brge	.+44     	; 0x3700 <itoa+0x3a>
    36d4:	4a 30       	cpi	r20, 0x0A	; 10
    36d6:	29 f4       	brne	.+10     	; 0x36e2 <itoa+0x1c>
    36d8:	97 fb       	bst	r25, 7
    36da:	1e f4       	brtc	.+6      	; 0x36e2 <itoa+0x1c>
    36dc:	90 95       	com	r25
    36de:	81 95       	neg	r24
    36e0:	9f 4f       	sbci	r25, 0xFF	; 255
    36e2:	64 2f       	mov	r22, r20
    36e4:	77 27       	eor	r23, r23
    36e6:	0e 94 94 1b 	call	0x3728	; 0x3728 <__udivmodhi4>
    36ea:	80 5d       	subi	r24, 0xD0	; 208
    36ec:	8a 33       	cpi	r24, 0x3A	; 58
    36ee:	0c f0       	brlt	.+2      	; 0x36f2 <itoa+0x2c>
    36f0:	89 5d       	subi	r24, 0xD9	; 217
    36f2:	81 93       	st	Z+, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	a1 f7       	brne	.-24     	; 0x36e2 <itoa+0x1c>
    36fa:	16 f4       	brtc	.+4      	; 0x3700 <itoa+0x3a>
    36fc:	5d e2       	ldi	r21, 0x2D	; 45
    36fe:	51 93       	st	Z+, r21
    3700:	10 82       	st	Z, r1
    3702:	c9 01       	movw	r24, r18
    3704:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <strrev>

00003708 <strrev>:
    3708:	dc 01       	movw	r26, r24
    370a:	fc 01       	movw	r30, r24
    370c:	67 2f       	mov	r22, r23
    370e:	71 91       	ld	r23, Z+
    3710:	77 23       	and	r23, r23
    3712:	e1 f7       	brne	.-8      	; 0x370c <strrev+0x4>
    3714:	32 97       	sbiw	r30, 0x02	; 2
    3716:	04 c0       	rjmp	.+8      	; 0x3720 <strrev+0x18>
    3718:	7c 91       	ld	r23, X
    371a:	6d 93       	st	X+, r22
    371c:	70 83       	st	Z, r23
    371e:	62 91       	ld	r22, -Z
    3720:	ae 17       	cp	r26, r30
    3722:	bf 07       	cpc	r27, r31
    3724:	c8 f3       	brcs	.-14     	; 0x3718 <strrev+0x10>
    3726:	08 95       	ret

00003728 <__udivmodhi4>:
    3728:	aa 1b       	sub	r26, r26
    372a:	bb 1b       	sub	r27, r27
    372c:	51 e1       	ldi	r21, 0x11	; 17
    372e:	07 c0       	rjmp	.+14     	; 0x373e <__udivmodhi4_ep>

00003730 <__udivmodhi4_loop>:
    3730:	aa 1f       	adc	r26, r26
    3732:	bb 1f       	adc	r27, r27
    3734:	a6 17       	cp	r26, r22
    3736:	b7 07       	cpc	r27, r23
    3738:	10 f0       	brcs	.+4      	; 0x373e <__udivmodhi4_ep>
    373a:	a6 1b       	sub	r26, r22
    373c:	b7 0b       	sbc	r27, r23

0000373e <__udivmodhi4_ep>:
    373e:	88 1f       	adc	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	5a 95       	dec	r21
    3744:	a9 f7       	brne	.-22     	; 0x3730 <__udivmodhi4_loop>
    3746:	80 95       	com	r24
    3748:	90 95       	com	r25
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	08 95       	ret

00003750 <_exit>:
    3750:	f8 94       	cli

00003752 <__stop_program>:
    3752:	ff cf       	rjmp	.-2      	; 0x3752 <__stop_program>
